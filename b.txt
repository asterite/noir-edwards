Compiled ACIR for main (unoptimized):
func 0
current witness index : 3
private parameters indices : [0]
public parameters indices : [1]
return value indices : []
EXPR [ (-1, _2) 0 ]
INIT (id: 0, len: 1) 
MEM (id: 0, write x1 at: x0) 
MEM (id: 0, read at: x0, value: x3) 
BRILLIG CALL func 0: PREDICATE = %EXPR [ 1 ]%
inputs: [Array([Expression { mul_terms: [], linear_combinations: [], q_c: 123 }, Expression { mul_terms: [], linear_combinations: [], q_c: 90 }, Expression { mul_terms: [], linear_combinations: [], q_c: 125 }]), Single(Expression { mul_terms: [], linear_combinations: [], q_c: 1 }), Single(Expression { mul_terms: [], linear_combinations: [(1, Witness(3))], q_c: 0 })], outputs: []

unconstrained func 0
[Const { destination: MemoryAddress(0), bit_size: 64, value: 1029 }, CalldataCopy { destination_address: MemoryAddress(1024), size: 5, offset: 0 }, Cast { destination: MemoryAddress(1024), source: MemoryAddress(1024), bit_size: 8 }, Cast { destination: MemoryAddress(1025), source: MemoryAddress(1025), bit_size: 8 }, Cast { destination: MemoryAddress(1026), source: MemoryAddress(1026), bit_size: 8 }, Cast { destination: MemoryAddress(1027), source: MemoryAddress(1027), bit_size: 64 }, Const { destination: MemoryAddress(2), bit_size: 64, value: 2¹⁰ }, Const { destination: MemoryAddress(3), bit_size: 64, value: 1 }, Mov { destination: MemoryAddress(4), source: MemoryAddress(1027) }, Mov { destination: MemoryAddress(5), source: MemoryAddress(1028) }, Mov { destination: MemoryAddress(6), source: MemoryAddress(2) }, Mov { destination: MemoryAddress(2), source: MemoryAddress(6) }, Call { location: 14 }, Stop { return_data_offset: 1029, return_data_size: 0 }, Const { destination: MemoryAddress(6), bit_size: 1, value: 1 }, Const { destination: MemoryAddress(9), bit_size: 64, value: 2⁴ }, Mov { destination: MemoryAddress(7), source: MemoryAddress(0) }, BinaryIntOp { destination: MemoryAddress(0), op: Add, bit_size: 64, lhs: MemoryAddress(0), rhs: MemoryAddress(9) }, Const { destination: MemoryAddress(8), bit_size: 64, value: 1 }, Const { destination: MemoryAddress(9), bit_size: 64, value: 0 }, Const { destination: MemoryAddress(10), bit_size: 8, value: 123 }, BinaryIntOp { destination: MemoryAddress(11), op: Add, bit_size: 64, lhs: MemoryAddress(7), rhs: MemoryAddress(9) }, Store { destination_pointer: MemoryAddress(11), source: MemoryAddress(10) }, Const { destination: MemoryAddress(11), bit_size: 64, value: 1 }, BinaryIntOp { destination: MemoryAddress(9), op: Add, bit_size: 64, lhs: MemoryAddress(9), rhs: MemoryAddress(11) }, Const { destination: MemoryAddress(11), bit_size: 8, value: 34 }, BinaryIntOp { destination: MemoryAddress(12), op: Add, bit_size: 64, lhs: MemoryAddress(7), rhs: MemoryAddress(9) }, Store { destination_pointer: MemoryAddress(12), source: MemoryAddress(11) }, Const { destination: MemoryAddress(12), bit_size: 64, value: 1 }, BinaryIntOp { destination: MemoryAddress(9), op: Add, bit_size: 64, lhs: MemoryAddress(9), rhs: MemoryAddress(12) }, Const { destination: MemoryAddress(12), bit_size: 8, value: 107 }, BinaryIntOp { destination: MemoryAddress(13), op: Add, bit_size: 64, lhs: MemoryAddress(7), rhs: MemoryAddress(9) }, Store { destination_pointer: MemoryAddress(13), source: MemoryAddress(12) }, Const { destination: MemoryAddress(13), bit_size: 64, value: 1 }, BinaryIntOp { destination: MemoryAddress(9), op: Add, bit_size: 64, lhs: MemoryAddress(9), rhs: MemoryAddress(13) }, Const { destination: MemoryAddress(13), bit_size: 8, value: 105 }, BinaryIntOp { destination: MemoryAddress(14), op: Add, bit_size: 64, lhs: MemoryAddress(7), rhs: MemoryAddress(9) }, Store { destination_pointer: MemoryAddress(14), source: MemoryAddress(13) }, Const { destination: MemoryAddress(14), bit_size: 64, value: 1 }, BinaryIntOp { destination: MemoryAddress(9), op: Add, bit_size: 64, lhs: MemoryAddress(9), rhs: MemoryAddress(14) }, Const { destination: MemoryAddress(14), bit_size: 8, value: 110 }, BinaryIntOp { destination: MemoryAddress(15), op: Add, bit_size: 64, lhs: MemoryAddress(7), rhs: MemoryAddress(9) }, Store { destination_pointer: MemoryAddress(15), source: MemoryAddress(14) }, Const { destination: MemoryAddress(15), bit_size: 64, value: 1 }, BinaryIntOp { destination: MemoryAddress(9), op: Add, bit_size: 64, lhs: MemoryAddress(9), rhs: MemoryAddress(15) }, Const { destination: MemoryAddress(15), bit_size: 8, value: 100 }, BinaryIntOp { destination: MemoryAddress(16), op: Add, bit_size: 64, lhs: MemoryAddress(7), rhs: MemoryAddress(9) }, Store { destination_pointer: MemoryAddress(16), source: MemoryAddress(15) }, Const { destination: MemoryAddress(16), bit_size: 64, value: 1 }, BinaryIntOp { destination: MemoryAddress(9), op: Add, bit_size: 64, lhs: MemoryAddress(9), rhs: MemoryAddress(16) }, BinaryIntOp { destination: MemoryAddress(16), op: Add, bit_size: 64, lhs: MemoryAddress(7), rhs: MemoryAddress(9) }, Store { destination_pointer: MemoryAddress(16), source: MemoryAddress(11) }, Const { destination: MemoryAddress(16), bit_size: 64, value: 1 }, BinaryIntOp { destination: MemoryAddress(9), op: Add, bit_size: 64, lhs: MemoryAddress(9), rhs: MemoryAddress(16) }, Const { destination: MemoryAddress(16), bit_size: 8, value: 58 }, BinaryIntOp { destination: MemoryAddress(17), op: Add, bit_size: 64, lhs: MemoryAddress(7), rhs: MemoryAddress(9) }, Store { destination_pointer: MemoryAddress(17), source: MemoryAddress(16) }, Const { destination: MemoryAddress(17), bit_size: 64, value: 1 }, BinaryIntOp { destination: MemoryAddress(9), op: Add, bit_size: 64, lhs: MemoryAddress(9), rhs: MemoryAddress(17) }, BinaryIntOp { destination: MemoryAddress(17), op: Add, bit_size: 64, lhs: MemoryAddress(7), rhs: MemoryAddress(9) }, Store { destination_pointer: MemoryAddress(17), source: MemoryAddress(11) }, Const { destination: MemoryAddress(17), bit_size: 64, value: 1 }, BinaryIntOp { destination: MemoryAddress(9), op: Add, bit_size: 64, lhs: MemoryAddress(9), rhs: MemoryAddress(17) }, Const { destination: MemoryAddress(17), bit_size: 8, value: 102 }, BinaryIntOp { destination: MemoryAddress(18), op: Add, bit_size: 64, lhs: MemoryAddress(7), rhs: MemoryAddress(9) }, Store { destination_pointer: MemoryAddress(18), source: MemoryAddress(17) }, Const { destination: MemoryAddress(18), bit_size: 64, value: 1 }, BinaryIntOp { destination: MemoryAddress(9), op: Add, bit_size: 64, lhs: MemoryAddress(9), rhs: MemoryAddress(18) }, BinaryIntOp { destination: MemoryAddress(18), op: Add, bit_size: 64, lhs: MemoryAddress(7), rhs: MemoryAddress(9) }, Store { destination_pointer: MemoryAddress(18), source: MemoryAddress(13) }, Const { destination: MemoryAddress(18), bit_size: 64, value: 1 }, BinaryIntOp { destination: MemoryAddress(9), op: Add, bit_size: 64, lhs: MemoryAddress(9), rhs: MemoryAddress(18) }, Const { destination: MemoryAddress(18), bit_size: 8, value: 101 }, BinaryIntOp { destination: MemoryAddress(19), op: Add, bit_size: 64, lhs: MemoryAddress(7), rhs: MemoryAddress(9) }, Store { destination_pointer: MemoryAddress(19), source: MemoryAddress(18) }, Const { destination: MemoryAddress(19), bit_size: 64, value: 1 }, BinaryIntOp { destination: MemoryAddress(9), op: Add, bit_size: 64, lhs: MemoryAddress(9), rhs: MemoryAddress(19) }, Const { destination: MemoryAddress(19), bit_size: 8, value: 108 }, BinaryIntOp { destination: MemoryAddress(20), op: Add, bit_size: 64, lhs: MemoryAddress(7), rhs: MemoryAddress(9) }, Store { destination_pointer: MemoryAddress(20), source: MemoryAddress(19) }, Const { destination: MemoryAddress(20), bit_size: 64, value: 1 }, BinaryIntOp { destination: MemoryAddress(9), op: Add, bit_size: 64, lhs: MemoryAddress(9), rhs: MemoryAddress(20) }, BinaryIntOp { destination: MemoryAddress(20), op: Add, bit_size: 64, lhs: MemoryAddress(7), rhs: MemoryAddress(9) }, Store { destination_pointer: MemoryAddress(20), source: MemoryAddress(15) }, Const { destination: MemoryAddress(20), bit_size: 64, value: 1 }, BinaryIntOp { destination: MemoryAddress(9), op: Add, bit_size: 64, lhs: MemoryAddress(9), rhs: MemoryAddress(20) }, BinaryIntOp { destination: MemoryAddress(20), op: Add, bit_size: 64, lhs: MemoryAddress(7), rhs: MemoryAddress(9) }, Store { destination_pointer: MemoryAddress(20), source: MemoryAddress(11) }, Const { destination: MemoryAddress(20), bit_size: 64, value: 1 }, BinaryIntOp { destination: MemoryAddress(9), op: Add, bit_size: 64, lhs: MemoryAddress(9), rhs: MemoryAddress(20) }, Const { destination: MemoryAddress(20), bit_size: 8, value: 125 }, BinaryIntOp { destination: MemoryAddress(21), op: Add, bit_size: 64, lhs: MemoryAddress(7), rhs: MemoryAddress(9) }, Store { destination_pointer: MemoryAddress(21), source: MemoryAddress(20) }, Const { destination: MemoryAddress(21), bit_size: 64, value: 1 }, BinaryIntOp { destination: MemoryAddress(9), op: Add, bit_size: 64, lhs: MemoryAddress(9), rhs: MemoryAddress(21) }, ForeignCall { function: "print", destinations: [], destination_value_types: [], inputs: [MemoryAddress(MemoryAddress(6)), HeapArray(HeapArray { pointer: MemoryAddress(2), size: 3 }), MemoryAddress(MemoryAddress(4)), MemoryAddress(MemoryAddress(5)), HeapArray(HeapArray { pointer: MemoryAddress(7), size: 16 }), MemoryAddress(MemoryAddress(6))], input_value_types: [Simple(1), Array { value_types: [Simple(8)], size: 3 }, Simple(254), Simple(254), Array { value_types: [Simple(8)], size: 16 }, Simple(1)] }, Return]

+---------+----------+----------------------+--------------+----------------------+
| Package | Function | Expression Width     | ACIR Opcodes | Backend Circuit Size |
+---------+----------+----------------------+--------------+----------------------+
| edwards | main     | Bounded { width: 4 } | 5            | 35                   |
+---------+----------+----------------------+--------------+----------------------+
