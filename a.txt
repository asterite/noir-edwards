Compiled ACIR for main (unoptimized):
func 0
current witness index : 912
private parameters indices : [0]
public parameters indices : [1]
return value indices : []
EXPR [ (-1, _2) 0 ]
INIT (id: 0, len: 1) 
MEM (id: 0, write x1 at: x0) 
MEM (id: 0, read at: x0, value: x3) 
BRILLIG CALL func 0: PREDICATE = %EXPR [ 1 ]%
inputs: [Array([Expression { mul_terms: [], linear_combinations: [], q_c: 123 }, Expression { mul_terms: [], linear_combinations: [], q_c: 90 }, Expression { mul_terms: [], linear_combinations: [], q_c: 125 }]), Single(Expression { mul_terms: [], linear_combinations: [], q_c: 1 }), Single(Expression { mul_terms: [], linear_combinations: [(1, Witness(3))], q_c: 0 })], outputs: []
BRILLIG CALL func 1: PREDICATE = %EXPR [ 1 ]%
inputs: [Single(Expression { mul_terms: [], linear_combinations: [(1, Witness(0))], q_c: 0 }), Single(Expression { mul_terms: [], linear_combinations: [(1, Witness(0))], q_c: 0 }), Single(Expression { mul_terms: [], linear_combinations: [(1, Witness(1))], q_c: 0 }), Single(Expression { mul_terms: [], linear_combinations: [(1, Witness(1))], q_c: 0 })], outputs: [Simple(Witness(4)), Simple(Witness(5)), Simple(Witness(6))]
EXPR [ (1, _0, _0) (-1, _7) 0 ]
EXPR [ (1, _0, _1) (-1, _8) 0 ]
EXPR [ (555, _4) (-1, _9) 1 ]
EXPR [ (-555, _4) (-1, _10) 1 ]
EXPR [ (1, _1, _1) (-1, _11) 0 ]
EXPR [ (1, _7, _11) (-1, _12) 0 ]
EXPR [ (1, _5, _9) (-2, _8) 0 ]
EXPR [ (1, _6, _10) (1, _7) (-1, _11) 0 ]
EXPR [ (-1, _4) (1, _12) 0 ]
BRILLIG CALL func 1: PREDICATE = %EXPR [ 1 ]%
inputs: [Single(Expression { mul_terms: [], linear_combinations: [(1, Witness(5))], q_c: 0 }), Single(Expression { mul_terms: [], linear_combinations: [(1, Witness(5))], q_c: 0 }), Single(Expression { mul_terms: [], linear_combinations: [(1, Witness(6))], q_c: 0 }), Single(Expression { mul_terms: [], linear_combinations: [(1, Witness(6))], q_c: 0 })], outputs: [Simple(Witness(13)), Simple(Witness(14)), Simple(Witness(15))]
EXPR [ (1, _5, _5) (-1, _16) 0 ]
EXPR [ (1, _5, _6) (-1, _17) 0 ]
EXPR [ (555, _13) (-1, _18) 1 ]
EXPR [ (-555, _13) (-1, _19) 1 ]
EXPR [ (1, _6, _6) (-1, _20) 0 ]
EXPR [ (1, _16, _20) (-1, _21) 0 ]
EXPR [ (1, _14, _18) (-2, _17) 0 ]
EXPR [ (1, _15, _19) (1, _16) (-1, _20) 0 ]
EXPR [ (-1, _13) (1, _21) 0 ]
BRILLIG CALL func 1: PREDICATE = %EXPR [ 1 ]%
inputs: [Single(Expression { mul_terms: [], linear_combinations: [(1, Witness(14))], q_c: 0 }), Single(Expression { mul_terms: [], linear_combinations: [(1, Witness(14))], q_c: 0 }), Single(Expression { mul_terms: [], linear_combinations: [(1, Witness(15))], q_c: 0 }), Single(Expression { mul_terms: [], linear_combinations: [(1, Witness(15))], q_c: 0 })], outputs: [Simple(Witness(22)), Simple(Witness(23)), Simple(Witness(24))]
EXPR [ (1, _14, _14) (-1, _25) 0 ]
EXPR [ (1, _14, _15) (-1, _26) 0 ]
EXPR [ (555, _22) (-1, _27) 1 ]
EXPR [ (-555, _22) (-1, _28) 1 ]
EXPR [ (1, _15, _15) (-1, _29) 0 ]
EXPR [ (1, _25, _29) (-1, _30) 0 ]
EXPR [ (1, _23, _27) (-2, _26) 0 ]
EXPR [ (1, _24, _28) (1, _25) (-1, _29) 0 ]
EXPR [ (-1, _22) (1, _30) 0 ]
BRILLIG CALL func 1: PREDICATE = %EXPR [ 1 ]%
inputs: [Single(Expression { mul_terms: [], linear_combinations: [(1, Witness(23))], q_c: 0 }), Single(Expression { mul_terms: [], linear_combinations: [(1, Witness(23))], q_c: 0 }), Single(Expression { mul_terms: [], linear_combinations: [(1, Witness(24))], q_c: 0 }), Single(Expression { mul_terms: [], linear_combinations: [(1, Witness(24))], q_c: 0 })], outputs: [Simple(Witness(31)), Simple(Witness(32)), Simple(Witness(33))]
EXPR [ (1, _23, _23) (-1, _34) 0 ]
EXPR [ (1, _23, _24) (-1, _35) 0 ]
EXPR [ (555, _31) (-1, _36) 1 ]
EXPR [ (-555, _31) (-1, _37) 1 ]
EXPR [ (1, _24, _24) (-1, _38) 0 ]
EXPR [ (1, _34, _38) (-1, _39) 0 ]
EXPR [ (1, _32, _36) (-2, _35) 0 ]
EXPR [ (1, _33, _37) (1, _34) (-1, _38) 0 ]
EXPR [ (-1, _31) (1, _39) 0 ]
BRILLIG CALL func 1: PREDICATE = %EXPR [ 1 ]%
inputs: [Single(Expression { mul_terms: [], linear_combinations: [(1, Witness(32))], q_c: 0 }), Single(Expression { mul_terms: [], linear_combinations: [(1, Witness(32))], q_c: 0 }), Single(Expression { mul_terms: [], linear_combinations: [(1, Witness(33))], q_c: 0 }), Single(Expression { mul_terms: [], linear_combinations: [(1, Witness(33))], q_c: 0 })], outputs: [Simple(Witness(40)), Simple(Witness(41)), Simple(Witness(42))]
EXPR [ (1, _32, _32) (-1, _43) 0 ]
EXPR [ (1, _32, _33) (-1, _44) 0 ]
EXPR [ (555, _40) (-1, _45) 1 ]
EXPR [ (-555, _40) (-1, _46) 1 ]
EXPR [ (1, _33, _33) (-1, _47) 0 ]
EXPR [ (1, _43, _47) (-1, _48) 0 ]
EXPR [ (1, _41, _45) (-2, _44) 0 ]
EXPR [ (1, _42, _46) (1, _43) (-1, _47) 0 ]
EXPR [ (-1, _40) (1, _48) 0 ]
BRILLIG CALL func 1: PREDICATE = %EXPR [ 1 ]%
inputs: [Single(Expression { mul_terms: [], linear_combinations: [(1, Witness(41))], q_c: 0 }), Single(Expression { mul_terms: [], linear_combinations: [(1, Witness(41))], q_c: 0 }), Single(Expression { mul_terms: [], linear_combinations: [(1, Witness(42))], q_c: 0 }), Single(Expression { mul_terms: [], linear_combinations: [(1, Witness(42))], q_c: 0 })], outputs: [Simple(Witness(49)), Simple(Witness(50)), Simple(Witness(51))]
EXPR [ (1, _41, _41) (-1, _52) 0 ]
EXPR [ (1, _41, _42) (-1, _53) 0 ]
EXPR [ (555, _49) (-1, _54) 1 ]
EXPR [ (-555, _49) (-1, _55) 1 ]
EXPR [ (1, _42, _42) (-1, _56) 0 ]
EXPR [ (1, _52, _56) (-1, _57) 0 ]
EXPR [ (1, _50, _54) (-2, _53) 0 ]
EXPR [ (1, _51, _55) (1, _52) (-1, _56) 0 ]
EXPR [ (-1, _49) (1, _57) 0 ]
BRILLIG CALL func 1: PREDICATE = %EXPR [ 1 ]%
inputs: [Single(Expression { mul_terms: [], linear_combinations: [(1, Witness(50))], q_c: 0 }), Single(Expression { mul_terms: [], linear_combinations: [(1, Witness(50))], q_c: 0 }), Single(Expression { mul_terms: [], linear_combinations: [(1, Witness(51))], q_c: 0 }), Single(Expression { mul_terms: [], linear_combinations: [(1, Witness(51))], q_c: 0 })], outputs: [Simple(Witness(58)), Simple(Witness(59)), Simple(Witness(60))]
EXPR [ (1, _50, _50) (-1, _61) 0 ]
EXPR [ (1, _50, _51) (-1, _62) 0 ]
EXPR [ (555, _58) (-1, _63) 1 ]
EXPR [ (-555, _58) (-1, _64) 1 ]
EXPR [ (1, _51, _51) (-1, _65) 0 ]
EXPR [ (1, _61, _65) (-1, _66) 0 ]
EXPR [ (1, _59, _63) (-2, _62) 0 ]
EXPR [ (1, _60, _64) (1, _61) (-1, _65) 0 ]
EXPR [ (-1, _58) (1, _66) 0 ]
BRILLIG CALL func 1: PREDICATE = %EXPR [ 1 ]%
inputs: [Single(Expression { mul_terms: [], linear_combinations: [(1, Witness(59))], q_c: 0 }), Single(Expression { mul_terms: [], linear_combinations: [(1, Witness(59))], q_c: 0 }), Single(Expression { mul_terms: [], linear_combinations: [(1, Witness(60))], q_c: 0 }), Single(Expression { mul_terms: [], linear_combinations: [(1, Witness(60))], q_c: 0 })], outputs: [Simple(Witness(67)), Simple(Witness(68)), Simple(Witness(69))]
EXPR [ (1, _59, _59) (-1, _70) 0 ]
EXPR [ (1, _59, _60) (-1, _71) 0 ]
EXPR [ (555, _67) (-1, _72) 1 ]
EXPR [ (-555, _67) (-1, _73) 1 ]
EXPR [ (1, _60, _60) (-1, _74) 0 ]
EXPR [ (1, _70, _74) (-1, _75) 0 ]
EXPR [ (1, _68, _72) (-2, _71) 0 ]
EXPR [ (1, _69, _73) (1, _70) (-1, _74) 0 ]
EXPR [ (-1, _67) (1, _75) 0 ]
BRILLIG CALL func 1: PREDICATE = %EXPR [ 1 ]%
inputs: [Single(Expression { mul_terms: [], linear_combinations: [(1, Witness(68))], q_c: 0 }), Single(Expression { mul_terms: [], linear_combinations: [(1, Witness(68))], q_c: 0 }), Single(Expression { mul_terms: [], linear_combinations: [(1, Witness(69))], q_c: 0 }), Single(Expression { mul_terms: [], linear_combinations: [(1, Witness(69))], q_c: 0 })], outputs: [Simple(Witness(76)), Simple(Witness(77)), Simple(Witness(78))]
EXPR [ (1, _68, _68) (-1, _79) 0 ]
EXPR [ (1, _68, _69) (-1, _80) 0 ]
EXPR [ (555, _76) (-1, _81) 1 ]
EXPR [ (-555, _76) (-1, _82) 1 ]
EXPR [ (1, _69, _69) (-1, _83) 0 ]
EXPR [ (1, _79, _83) (-1, _84) 0 ]
EXPR [ (1, _77, _81) (-2, _80) 0 ]
EXPR [ (1, _78, _82) (1, _79) (-1, _83) 0 ]
EXPR [ (-1, _76) (1, _84) 0 ]
BRILLIG CALL func 1: PREDICATE = %EXPR [ 1 ]%
inputs: [Single(Expression { mul_terms: [], linear_combinations: [(1, Witness(77))], q_c: 0 }), Single(Expression { mul_terms: [], linear_combinations: [(1, Witness(77))], q_c: 0 }), Single(Expression { mul_terms: [], linear_combinations: [(1, Witness(78))], q_c: 0 }), Single(Expression { mul_terms: [], linear_combinations: [(1, Witness(78))], q_c: 0 })], outputs: [Simple(Witness(85)), Simple(Witness(86)), Simple(Witness(87))]
EXPR [ (1, _77, _77) (-1, _88) 0 ]
EXPR [ (1, _77, _78) (-1, _89) 0 ]
EXPR [ (555, _85) (-1, _90) 1 ]
EXPR [ (-555, _85) (-1, _91) 1 ]
EXPR [ (1, _78, _78) (-1, _92) 0 ]
EXPR [ (1, _88, _92) (-1, _93) 0 ]
EXPR [ (1, _86, _90) (-2, _89) 0 ]
EXPR [ (1, _87, _91) (1, _88) (-1, _92) 0 ]
EXPR [ (-1, _85) (1, _93) 0 ]
BRILLIG CALL func 1: PREDICATE = %EXPR [ 1 ]%
inputs: [Single(Expression { mul_terms: [], linear_combinations: [(1, Witness(86))], q_c: 0 }), Single(Expression { mul_terms: [], linear_combinations: [(1, Witness(86))], q_c: 0 }), Single(Expression { mul_terms: [], linear_combinations: [(1, Witness(87))], q_c: 0 }), Single(Expression { mul_terms: [], linear_combinations: [(1, Witness(87))], q_c: 0 })], outputs: [Simple(Witness(94)), Simple(Witness(95)), Simple(Witness(96))]
EXPR [ (1, _86, _86) (-1, _97) 0 ]
EXPR [ (1, _86, _87) (-1, _98) 0 ]
EXPR [ (555, _94) (-1, _99) 1 ]
EXPR [ (-555, _94) (-1, _100) 1 ]
EXPR [ (1, _87, _87) (-1, _101) 0 ]
EXPR [ (1, _97, _101) (-1, _102) 0 ]
EXPR [ (1, _95, _99) (-2, _98) 0 ]
EXPR [ (1, _96, _100) (1, _97) (-1, _101) 0 ]
EXPR [ (-1, _94) (1, _102) 0 ]
BRILLIG CALL func 1: PREDICATE = %EXPR [ 1 ]%
inputs: [Single(Expression { mul_terms: [], linear_combinations: [(1, Witness(95))], q_c: 0 }), Single(Expression { mul_terms: [], linear_combinations: [(1, Witness(95))], q_c: 0 }), Single(Expression { mul_terms: [], linear_combinations: [(1, Witness(96))], q_c: 0 }), Single(Expression { mul_terms: [], linear_combinations: [(1, Witness(96))], q_c: 0 })], outputs: [Simple(Witness(103)), Simple(Witness(104)), Simple(Witness(105))]
EXPR [ (1, _95, _95) (-1, _106) 0 ]
EXPR [ (1, _95, _96) (-1, _107) 0 ]
EXPR [ (555, _103) (-1, _108) 1 ]
EXPR [ (-555, _103) (-1, _109) 1 ]
EXPR [ (1, _96, _96) (-1, _110) 0 ]
EXPR [ (1, _106, _110) (-1, _111) 0 ]
EXPR [ (1, _104, _108) (-2, _107) 0 ]
EXPR [ (1, _105, _109) (1, _106) (-1, _110) 0 ]
EXPR [ (-1, _103) (1, _111) 0 ]
BRILLIG CALL func 1: PREDICATE = %EXPR [ 1 ]%
inputs: [Single(Expression { mul_terms: [], linear_combinations: [(1, Witness(104))], q_c: 0 }), Single(Expression { mul_terms: [], linear_combinations: [(1, Witness(104))], q_c: 0 }), Single(Expression { mul_terms: [], linear_combinations: [(1, Witness(105))], q_c: 0 }), Single(Expression { mul_terms: [], linear_combinations: [(1, Witness(105))], q_c: 0 })], outputs: [Simple(Witness(112)), Simple(Witness(113)), Simple(Witness(114))]
EXPR [ (1, _104, _104) (-1, _115) 0 ]
EXPR [ (1, _104, _105) (-1, _116) 0 ]
EXPR [ (555, _112) (-1, _117) 1 ]
EXPR [ (-555, _112) (-1, _118) 1 ]
EXPR [ (1, _105, _105) (-1, _119) 0 ]
EXPR [ (1, _115, _119) (-1, _120) 0 ]
EXPR [ (1, _113, _117) (-2, _116) 0 ]
EXPR [ (1, _114, _118) (1, _115) (-1, _119) 0 ]
EXPR [ (-1, _112) (1, _120) 0 ]
BRILLIG CALL func 1: PREDICATE = %EXPR [ 1 ]%
inputs: [Single(Expression { mul_terms: [], linear_combinations: [(1, Witness(113))], q_c: 0 }), Single(Expression { mul_terms: [], linear_combinations: [(1, Witness(113))], q_c: 0 }), Single(Expression { mul_terms: [], linear_combinations: [(1, Witness(114))], q_c: 0 }), Single(Expression { mul_terms: [], linear_combinations: [(1, Witness(114))], q_c: 0 })], outputs: [Simple(Witness(121)), Simple(Witness(122)), Simple(Witness(123))]
EXPR [ (1, _113, _113) (-1, _124) 0 ]
EXPR [ (1, _113, _114) (-1, _125) 0 ]
EXPR [ (555, _121) (-1, _126) 1 ]
EXPR [ (-555, _121) (-1, _127) 1 ]
EXPR [ (1, _114, _114) (-1, _128) 0 ]
EXPR [ (1, _124, _128) (-1, _129) 0 ]
EXPR [ (1, _122, _126) (-2, _125) 0 ]
EXPR [ (1, _123, _127) (1, _124) (-1, _128) 0 ]
EXPR [ (-1, _121) (1, _129) 0 ]
BRILLIG CALL func 1: PREDICATE = %EXPR [ 1 ]%
inputs: [Single(Expression { mul_terms: [], linear_combinations: [(1, Witness(122))], q_c: 0 }), Single(Expression { mul_terms: [], linear_combinations: [(1, Witness(122))], q_c: 0 }), Single(Expression { mul_terms: [], linear_combinations: [(1, Witness(123))], q_c: 0 }), Single(Expression { mul_terms: [], linear_combinations: [(1, Witness(123))], q_c: 0 })], outputs: [Simple(Witness(130)), Simple(Witness(131)), Simple(Witness(132))]
EXPR [ (1, _122, _122) (-1, _133) 0 ]
EXPR [ (1, _122, _123) (-1, _134) 0 ]
EXPR [ (555, _130) (-1, _135) 1 ]
EXPR [ (-555, _130) (-1, _136) 1 ]
EXPR [ (1, _123, _123) (-1, _137) 0 ]
EXPR [ (1, _133, _137) (-1, _138) 0 ]
EXPR [ (1, _131, _135) (-2, _134) 0 ]
EXPR [ (1, _132, _136) (1, _133) (-1, _137) 0 ]
EXPR [ (-1, _130) (1, _138) 0 ]
BRILLIG CALL func 1: PREDICATE = %EXPR [ 1 ]%
inputs: [Single(Expression { mul_terms: [], linear_combinations: [(1, Witness(131))], q_c: 0 }), Single(Expression { mul_terms: [], linear_combinations: [(1, Witness(131))], q_c: 0 }), Single(Expression { mul_terms: [], linear_combinations: [(1, Witness(132))], q_c: 0 }), Single(Expression { mul_terms: [], linear_combinations: [(1, Witness(132))], q_c: 0 })], outputs: [Simple(Witness(139)), Simple(Witness(140)), Simple(Witness(141))]
EXPR [ (1, _131, _131) (-1, _142) 0 ]
EXPR [ (1, _131, _132) (-1, _143) 0 ]
EXPR [ (555, _139) (-1, _144) 1 ]
EXPR [ (-555, _139) (-1, _145) 1 ]
EXPR [ (1, _132, _132) (-1, _146) 0 ]
EXPR [ (1, _142, _146) (-1, _147) 0 ]
EXPR [ (1, _140, _144) (-2, _143) 0 ]
EXPR [ (1, _141, _145) (1, _142) (-1, _146) 0 ]
EXPR [ (-1, _139) (1, _147) 0 ]
BRILLIG CALL func 1: PREDICATE = %EXPR [ 1 ]%
inputs: [Single(Expression { mul_terms: [], linear_combinations: [(1, Witness(140))], q_c: 0 }), Single(Expression { mul_terms: [], linear_combinations: [(1, Witness(140))], q_c: 0 }), Single(Expression { mul_terms: [], linear_combinations: [(1, Witness(141))], q_c: 0 }), Single(Expression { mul_terms: [], linear_combinations: [(1, Witness(141))], q_c: 0 })], outputs: [Simple(Witness(148)), Simple(Witness(149)), Simple(Witness(150))]
EXPR [ (1, _140, _140) (-1, _151) 0 ]
EXPR [ (1, _140, _141) (-1, _152) 0 ]
EXPR [ (555, _148) (-1, _153) 1 ]
EXPR [ (-555, _148) (-1, _154) 1 ]
EXPR [ (1, _141, _141) (-1, _155) 0 ]
EXPR [ (1, _151, _155) (-1, _156) 0 ]
EXPR [ (1, _149, _153) (-2, _152) 0 ]
EXPR [ (1, _150, _154) (1, _151) (-1, _155) 0 ]
EXPR [ (-1, _148) (1, _156) 0 ]
BRILLIG CALL func 1: PREDICATE = %EXPR [ 1 ]%
inputs: [Single(Expression { mul_terms: [], linear_combinations: [(1, Witness(149))], q_c: 0 }), Single(Expression { mul_terms: [], linear_combinations: [(1, Witness(149))], q_c: 0 }), Single(Expression { mul_terms: [], linear_combinations: [(1, Witness(150))], q_c: 0 }), Single(Expression { mul_terms: [], linear_combinations: [(1, Witness(150))], q_c: 0 })], outputs: [Simple(Witness(157)), Simple(Witness(158)), Simple(Witness(159))]
EXPR [ (1, _149, _149) (-1, _160) 0 ]
EXPR [ (1, _149, _150) (-1, _161) 0 ]
EXPR [ (555, _157) (-1, _162) 1 ]
EXPR [ (-555, _157) (-1, _163) 1 ]
EXPR [ (1, _150, _150) (-1, _164) 0 ]
EXPR [ (1, _160, _164) (-1, _165) 0 ]
EXPR [ (1, _158, _162) (-2, _161) 0 ]
EXPR [ (1, _159, _163) (1, _160) (-1, _164) 0 ]
EXPR [ (-1, _157) (1, _165) 0 ]
BRILLIG CALL func 1: PREDICATE = %EXPR [ 1 ]%
inputs: [Single(Expression { mul_terms: [], linear_combinations: [(1, Witness(158))], q_c: 0 }), Single(Expression { mul_terms: [], linear_combinations: [(1, Witness(158))], q_c: 0 }), Single(Expression { mul_terms: [], linear_combinations: [(1, Witness(159))], q_c: 0 }), Single(Expression { mul_terms: [], linear_combinations: [(1, Witness(159))], q_c: 0 })], outputs: [Simple(Witness(166)), Simple(Witness(167)), Simple(Witness(168))]
EXPR [ (1, _158, _158) (-1, _169) 0 ]
EXPR [ (1, _158, _159) (-1, _170) 0 ]
EXPR [ (555, _166) (-1, _171) 1 ]
EXPR [ (-555, _166) (-1, _172) 1 ]
EXPR [ (1, _159, _159) (-1, _173) 0 ]
EXPR [ (1, _169, _173) (-1, _174) 0 ]
EXPR [ (1, _167, _171) (-2, _170) 0 ]
EXPR [ (1, _168, _172) (1, _169) (-1, _173) 0 ]
EXPR [ (-1, _166) (1, _174) 0 ]
BRILLIG CALL func 1: PREDICATE = %EXPR [ 1 ]%
inputs: [Single(Expression { mul_terms: [], linear_combinations: [(1, Witness(167))], q_c: 0 }), Single(Expression { mul_terms: [], linear_combinations: [(1, Witness(167))], q_c: 0 }), Single(Expression { mul_terms: [], linear_combinations: [(1, Witness(168))], q_c: 0 }), Single(Expression { mul_terms: [], linear_combinations: [(1, Witness(168))], q_c: 0 })], outputs: [Simple(Witness(175)), Simple(Witness(176)), Simple(Witness(177))]
EXPR [ (1, _167, _167) (-1, _178) 0 ]
EXPR [ (1, _167, _168) (-1, _179) 0 ]
EXPR [ (555, _175) (-1, _180) 1 ]
EXPR [ (-555, _175) (-1, _181) 1 ]
EXPR [ (1, _168, _168) (-1, _182) 0 ]
EXPR [ (1, _178, _182) (-1, _183) 0 ]
EXPR [ (1, _176, _180) (-2, _179) 0 ]
EXPR [ (1, _177, _181) (1, _178) (-1, _182) 0 ]
EXPR [ (-1, _175) (1, _183) 0 ]
BRILLIG CALL func 1: PREDICATE = %EXPR [ 1 ]%
inputs: [Single(Expression { mul_terms: [], linear_combinations: [(1, Witness(176))], q_c: 0 }), Single(Expression { mul_terms: [], linear_combinations: [(1, Witness(176))], q_c: 0 }), Single(Expression { mul_terms: [], linear_combinations: [(1, Witness(177))], q_c: 0 }), Single(Expression { mul_terms: [], linear_combinations: [(1, Witness(177))], q_c: 0 })], outputs: [Simple(Witness(184)), Simple(Witness(185)), Simple(Witness(186))]
EXPR [ (1, _176, _176) (-1, _187) 0 ]
EXPR [ (1, _176, _177) (-1, _188) 0 ]
EXPR [ (555, _184) (-1, _189) 1 ]
EXPR [ (-555, _184) (-1, _190) 1 ]
EXPR [ (1, _177, _177) (-1, _191) 0 ]
EXPR [ (1, _187, _191) (-1, _192) 0 ]
EXPR [ (1, _185, _189) (-2, _188) 0 ]
EXPR [ (1, _186, _190) (1, _187) (-1, _191) 0 ]
EXPR [ (-1, _184) (1, _192) 0 ]
BRILLIG CALL func 1: PREDICATE = %EXPR [ 1 ]%
inputs: [Single(Expression { mul_terms: [], linear_combinations: [(1, Witness(185))], q_c: 0 }), Single(Expression { mul_terms: [], linear_combinations: [(1, Witness(185))], q_c: 0 }), Single(Expression { mul_terms: [], linear_combinations: [(1, Witness(186))], q_c: 0 }), Single(Expression { mul_terms: [], linear_combinations: [(1, Witness(186))], q_c: 0 })], outputs: [Simple(Witness(193)), Simple(Witness(194)), Simple(Witness(195))]
EXPR [ (1, _185, _185) (-1, _196) 0 ]
EXPR [ (1, _185, _186) (-1, _197) 0 ]
EXPR [ (555, _193) (-1, _198) 1 ]
EXPR [ (-555, _193) (-1, _199) 1 ]
EXPR [ (1, _186, _186) (-1, _200) 0 ]
EXPR [ (1, _196, _200) (-1, _201) 0 ]
EXPR [ (1, _194, _198) (-2, _197) 0 ]
EXPR [ (1, _195, _199) (1, _196) (-1, _200) 0 ]
EXPR [ (-1, _193) (1, _201) 0 ]
BRILLIG CALL func 1: PREDICATE = %EXPR [ 1 ]%
inputs: [Single(Expression { mul_terms: [], linear_combinations: [(1, Witness(194))], q_c: 0 }), Single(Expression { mul_terms: [], linear_combinations: [(1, Witness(194))], q_c: 0 }), Single(Expression { mul_terms: [], linear_combinations: [(1, Witness(195))], q_c: 0 }), Single(Expression { mul_terms: [], linear_combinations: [(1, Witness(195))], q_c: 0 })], outputs: [Simple(Witness(202)), Simple(Witness(203)), Simple(Witness(204))]
EXPR [ (1, _194, _194) (-1, _205) 0 ]
EXPR [ (1, _194, _195) (-1, _206) 0 ]
EXPR [ (555, _202) (-1, _207) 1 ]
EXPR [ (-555, _202) (-1, _208) 1 ]
EXPR [ (1, _195, _195) (-1, _209) 0 ]
EXPR [ (1, _205, _209) (-1, _210) 0 ]
EXPR [ (1, _203, _207) (-2, _206) 0 ]
EXPR [ (1, _204, _208) (1, _205) (-1, _209) 0 ]
EXPR [ (-1, _202) (1, _210) 0 ]
BRILLIG CALL func 1: PREDICATE = %EXPR [ 1 ]%
inputs: [Single(Expression { mul_terms: [], linear_combinations: [(1, Witness(203))], q_c: 0 }), Single(Expression { mul_terms: [], linear_combinations: [(1, Witness(203))], q_c: 0 }), Single(Expression { mul_terms: [], linear_combinations: [(1, Witness(204))], q_c: 0 }), Single(Expression { mul_terms: [], linear_combinations: [(1, Witness(204))], q_c: 0 })], outputs: [Simple(Witness(211)), Simple(Witness(212)), Simple(Witness(213))]
EXPR [ (1, _203, _203) (-1, _214) 0 ]
EXPR [ (1, _203, _204) (-1, _215) 0 ]
EXPR [ (555, _211) (-1, _216) 1 ]
EXPR [ (-555, _211) (-1, _217) 1 ]
EXPR [ (1, _204, _204) (-1, _218) 0 ]
EXPR [ (1, _214, _218) (-1, _219) 0 ]
EXPR [ (1, _212, _216) (-2, _215) 0 ]
EXPR [ (1, _213, _217) (1, _214) (-1, _218) 0 ]
EXPR [ (-1, _211) (1, _219) 0 ]
BRILLIG CALL func 1: PREDICATE = %EXPR [ 1 ]%
inputs: [Single(Expression { mul_terms: [], linear_combinations: [(1, Witness(212))], q_c: 0 }), Single(Expression { mul_terms: [], linear_combinations: [(1, Witness(212))], q_c: 0 }), Single(Expression { mul_terms: [], linear_combinations: [(1, Witness(213))], q_c: 0 }), Single(Expression { mul_terms: [], linear_combinations: [(1, Witness(213))], q_c: 0 })], outputs: [Simple(Witness(220)), Simple(Witness(221)), Simple(Witness(222))]
EXPR [ (1, _212, _212) (-1, _223) 0 ]
EXPR [ (1, _212, _213) (-1, _224) 0 ]
EXPR [ (555, _220) (-1, _225) 1 ]
EXPR [ (-555, _220) (-1, _226) 1 ]
EXPR [ (1, _213, _213) (-1, _227) 0 ]
EXPR [ (1, _223, _227) (-1, _228) 0 ]
EXPR [ (1, _221, _225) (-2, _224) 0 ]
EXPR [ (1, _222, _226) (1, _223) (-1, _227) 0 ]
EXPR [ (-1, _220) (1, _228) 0 ]
BRILLIG CALL func 1: PREDICATE = %EXPR [ 1 ]%
inputs: [Single(Expression { mul_terms: [], linear_combinations: [(1, Witness(221))], q_c: 0 }), Single(Expression { mul_terms: [], linear_combinations: [(1, Witness(221))], q_c: 0 }), Single(Expression { mul_terms: [], linear_combinations: [(1, Witness(222))], q_c: 0 }), Single(Expression { mul_terms: [], linear_combinations: [(1, Witness(222))], q_c: 0 })], outputs: [Simple(Witness(229)), Simple(Witness(230)), Simple(Witness(231))]
EXPR [ (1, _221, _221) (-1, _232) 0 ]
EXPR [ (1, _221, _222) (-1, _233) 0 ]
EXPR [ (555, _229) (-1, _234) 1 ]
EXPR [ (-555, _229) (-1, _235) 1 ]
EXPR [ (1, _222, _222) (-1, _236) 0 ]
EXPR [ (1, _232, _236) (-1, _237) 0 ]
EXPR [ (1, _230, _234) (-2, _233) 0 ]
EXPR [ (1, _231, _235) (1, _232) (-1, _236) 0 ]
EXPR [ (-1, _229) (1, _237) 0 ]
BRILLIG CALL func 1: PREDICATE = %EXPR [ 1 ]%
inputs: [Single(Expression { mul_terms: [], linear_combinations: [(1, Witness(230))], q_c: 0 }), Single(Expression { mul_terms: [], linear_combinations: [(1, Witness(230))], q_c: 0 }), Single(Expression { mul_terms: [], linear_combinations: [(1, Witness(231))], q_c: 0 }), Single(Expression { mul_terms: [], linear_combinations: [(1, Witness(231))], q_c: 0 })], outputs: [Simple(Witness(238)), Simple(Witness(239)), Simple(Witness(240))]
EXPR [ (1, _230, _230) (-1, _241) 0 ]
EXPR [ (1, _230, _231) (-1, _242) 0 ]
EXPR [ (555, _238) (-1, _243) 1 ]
EXPR [ (-555, _238) (-1, _244) 1 ]
EXPR [ (1, _231, _231) (-1, _245) 0 ]
EXPR [ (1, _241, _245) (-1, _246) 0 ]
EXPR [ (1, _239, _243) (-2, _242) 0 ]
EXPR [ (1, _240, _244) (1, _241) (-1, _245) 0 ]
EXPR [ (-1, _238) (1, _246) 0 ]
BRILLIG CALL func 1: PREDICATE = %EXPR [ 1 ]%
inputs: [Single(Expression { mul_terms: [], linear_combinations: [(1, Witness(239))], q_c: 0 }), Single(Expression { mul_terms: [], linear_combinations: [(1, Witness(239))], q_c: 0 }), Single(Expression { mul_terms: [], linear_combinations: [(1, Witness(240))], q_c: 0 }), Single(Expression { mul_terms: [], linear_combinations: [(1, Witness(240))], q_c: 0 })], outputs: [Simple(Witness(247)), Simple(Witness(248)), Simple(Witness(249))]
EXPR [ (1, _239, _239) (-1, _250) 0 ]
EXPR [ (1, _239, _240) (-1, _251) 0 ]
EXPR [ (555, _247) (-1, _252) 1 ]
EXPR [ (-555, _247) (-1, _253) 1 ]
EXPR [ (1, _240, _240) (-1, _254) 0 ]
EXPR [ (1, _250, _254) (-1, _255) 0 ]
EXPR [ (1, _248, _252) (-2, _251) 0 ]
EXPR [ (1, _249, _253) (1, _250) (-1, _254) 0 ]
EXPR [ (-1, _247) (1, _255) 0 ]
BRILLIG CALL func 1: PREDICATE = %EXPR [ 1 ]%
inputs: [Single(Expression { mul_terms: [], linear_combinations: [(1, Witness(248))], q_c: 0 }), Single(Expression { mul_terms: [], linear_combinations: [(1, Witness(248))], q_c: 0 }), Single(Expression { mul_terms: [], linear_combinations: [(1, Witness(249))], q_c: 0 }), Single(Expression { mul_terms: [], linear_combinations: [(1, Witness(249))], q_c: 0 })], outputs: [Simple(Witness(256)), Simple(Witness(257)), Simple(Witness(258))]
EXPR [ (1, _248, _248) (-1, _259) 0 ]
EXPR [ (1, _248, _249) (-1, _260) 0 ]
EXPR [ (555, _256) (-1, _261) 1 ]
EXPR [ (-555, _256) (-1, _262) 1 ]
EXPR [ (1, _249, _249) (-1, _263) 0 ]
EXPR [ (1, _259, _263) (-1, _264) 0 ]
EXPR [ (1, _257, _261) (-2, _260) 0 ]
EXPR [ (1, _258, _262) (1, _259) (-1, _263) 0 ]
EXPR [ (-1, _256) (1, _264) 0 ]
BRILLIG CALL func 1: PREDICATE = %EXPR [ 1 ]%
inputs: [Single(Expression { mul_terms: [], linear_combinations: [(1, Witness(257))], q_c: 0 }), Single(Expression { mul_terms: [], linear_combinations: [(1, Witness(257))], q_c: 0 }), Single(Expression { mul_terms: [], linear_combinations: [(1, Witness(258))], q_c: 0 }), Single(Expression { mul_terms: [], linear_combinations: [(1, Witness(258))], q_c: 0 })], outputs: [Simple(Witness(265)), Simple(Witness(266)), Simple(Witness(267))]
EXPR [ (1, _257, _257) (-1, _268) 0 ]
EXPR [ (1, _257, _258) (-1, _269) 0 ]
EXPR [ (555, _265) (-1, _270) 1 ]
EXPR [ (-555, _265) (-1, _271) 1 ]
EXPR [ (1, _258, _258) (-1, _272) 0 ]
EXPR [ (1, _268, _272) (-1, _273) 0 ]
EXPR [ (1, _266, _270) (-2, _269) 0 ]
EXPR [ (1, _267, _271) (1, _268) (-1, _272) 0 ]
EXPR [ (-1, _265) (1, _273) 0 ]
BRILLIG CALL func 1: PREDICATE = %EXPR [ 1 ]%
inputs: [Single(Expression { mul_terms: [], linear_combinations: [(1, Witness(266))], q_c: 0 }), Single(Expression { mul_terms: [], linear_combinations: [(1, Witness(266))], q_c: 0 }), Single(Expression { mul_terms: [], linear_combinations: [(1, Witness(267))], q_c: 0 }), Single(Expression { mul_terms: [], linear_combinations: [(1, Witness(267))], q_c: 0 })], outputs: [Simple(Witness(274)), Simple(Witness(275)), Simple(Witness(276))]
EXPR [ (1, _266, _266) (-1, _277) 0 ]
EXPR [ (1, _266, _267) (-1, _278) 0 ]
EXPR [ (555, _274) (-1, _279) 1 ]
EXPR [ (-555, _274) (-1, _280) 1 ]
EXPR [ (1, _267, _267) (-1, _281) 0 ]
EXPR [ (1, _277, _281) (-1, _282) 0 ]
EXPR [ (1, _275, _279) (-2, _278) 0 ]
EXPR [ (1, _276, _280) (1, _277) (-1, _281) 0 ]
EXPR [ (-1, _274) (1, _282) 0 ]
BRILLIG CALL func 1: PREDICATE = %EXPR [ 1 ]%
inputs: [Single(Expression { mul_terms: [], linear_combinations: [(1, Witness(275))], q_c: 0 }), Single(Expression { mul_terms: [], linear_combinations: [(1, Witness(275))], q_c: 0 }), Single(Expression { mul_terms: [], linear_combinations: [(1, Witness(276))], q_c: 0 }), Single(Expression { mul_terms: [], linear_combinations: [(1, Witness(276))], q_c: 0 })], outputs: [Simple(Witness(283)), Simple(Witness(284)), Simple(Witness(285))]
EXPR [ (1, _275, _275) (-1, _286) 0 ]
EXPR [ (1, _275, _276) (-1, _287) 0 ]
EXPR [ (555, _283) (-1, _288) 1 ]
EXPR [ (-555, _283) (-1, _289) 1 ]
EXPR [ (1, _276, _276) (-1, _290) 0 ]
EXPR [ (1, _286, _290) (-1, _291) 0 ]
EXPR [ (1, _284, _288) (-2, _287) 0 ]
EXPR [ (1, _285, _289) (1, _286) (-1, _290) 0 ]
EXPR [ (-1, _283) (1, _291) 0 ]
BRILLIG CALL func 1: PREDICATE = %EXPR [ 1 ]%
inputs: [Single(Expression { mul_terms: [], linear_combinations: [(1, Witness(284))], q_c: 0 }), Single(Expression { mul_terms: [], linear_combinations: [(1, Witness(284))], q_c: 0 }), Single(Expression { mul_terms: [], linear_combinations: [(1, Witness(285))], q_c: 0 }), Single(Expression { mul_terms: [], linear_combinations: [(1, Witness(285))], q_c: 0 })], outputs: [Simple(Witness(292)), Simple(Witness(293)), Simple(Witness(294))]
EXPR [ (1, _284, _284) (-1, _295) 0 ]
EXPR [ (1, _284, _285) (-1, _296) 0 ]
EXPR [ (555, _292) (-1, _297) 1 ]
EXPR [ (-555, _292) (-1, _298) 1 ]
EXPR [ (1, _285, _285) (-1, _299) 0 ]
EXPR [ (1, _295, _299) (-1, _300) 0 ]
EXPR [ (1, _293, _297) (-2, _296) 0 ]
EXPR [ (1, _294, _298) (1, _295) (-1, _299) 0 ]
EXPR [ (-1, _292) (1, _300) 0 ]
BRILLIG CALL func 1: PREDICATE = %EXPR [ 1 ]%
inputs: [Single(Expression { mul_terms: [], linear_combinations: [(1, Witness(293))], q_c: 0 }), Single(Expression { mul_terms: [], linear_combinations: [(1, Witness(293))], q_c: 0 }), Single(Expression { mul_terms: [], linear_combinations: [(1, Witness(294))], q_c: 0 }), Single(Expression { mul_terms: [], linear_combinations: [(1, Witness(294))], q_c: 0 })], outputs: [Simple(Witness(301)), Simple(Witness(302)), Simple(Witness(303))]
EXPR [ (1, _293, _293) (-1, _304) 0 ]
EXPR [ (1, _293, _294) (-1, _305) 0 ]
EXPR [ (555, _301) (-1, _306) 1 ]
EXPR [ (-555, _301) (-1, _307) 1 ]
EXPR [ (1, _294, _294) (-1, _308) 0 ]
EXPR [ (1, _304, _308) (-1, _309) 0 ]
EXPR [ (1, _302, _306) (-2, _305) 0 ]
EXPR [ (1, _303, _307) (1, _304) (-1, _308) 0 ]
EXPR [ (-1, _301) (1, _309) 0 ]
BRILLIG CALL func 1: PREDICATE = %EXPR [ 1 ]%
inputs: [Single(Expression { mul_terms: [], linear_combinations: [(1, Witness(302))], q_c: 0 }), Single(Expression { mul_terms: [], linear_combinations: [(1, Witness(302))], q_c: 0 }), Single(Expression { mul_terms: [], linear_combinations: [(1, Witness(303))], q_c: 0 }), Single(Expression { mul_terms: [], linear_combinations: [(1, Witness(303))], q_c: 0 })], outputs: [Simple(Witness(310)), Simple(Witness(311)), Simple(Witness(312))]
EXPR [ (1, _302, _302) (-1, _313) 0 ]
EXPR [ (1, _302, _303) (-1, _314) 0 ]
EXPR [ (555, _310) (-1, _315) 1 ]
EXPR [ (-555, _310) (-1, _316) 1 ]
EXPR [ (1, _303, _303) (-1, _317) 0 ]
EXPR [ (1, _313, _317) (-1, _318) 0 ]
EXPR [ (1, _311, _315) (-2, _314) 0 ]
EXPR [ (1, _312, _316) (1, _313) (-1, _317) 0 ]
EXPR [ (-1, _310) (1, _318) 0 ]
BRILLIG CALL func 1: PREDICATE = %EXPR [ 1 ]%
inputs: [Single(Expression { mul_terms: [], linear_combinations: [(1, Witness(311))], q_c: 0 }), Single(Expression { mul_terms: [], linear_combinations: [(1, Witness(311))], q_c: 0 }), Single(Expression { mul_terms: [], linear_combinations: [(1, Witness(312))], q_c: 0 }), Single(Expression { mul_terms: [], linear_combinations: [(1, Witness(312))], q_c: 0 })], outputs: [Simple(Witness(319)), Simple(Witness(320)), Simple(Witness(321))]
EXPR [ (1, _311, _311) (-1, _322) 0 ]
EXPR [ (1, _311, _312) (-1, _323) 0 ]
EXPR [ (555, _319) (-1, _324) 1 ]
EXPR [ (-555, _319) (-1, _325) 1 ]
EXPR [ (1, _312, _312) (-1, _326) 0 ]
EXPR [ (1, _322, _326) (-1, _327) 0 ]
EXPR [ (1, _320, _324) (-2, _323) 0 ]
EXPR [ (1, _321, _325) (1, _322) (-1, _326) 0 ]
EXPR [ (-1, _319) (1, _327) 0 ]
BRILLIG CALL func 1: PREDICATE = %EXPR [ 1 ]%
inputs: [Single(Expression { mul_terms: [], linear_combinations: [(1, Witness(320))], q_c: 0 }), Single(Expression { mul_terms: [], linear_combinations: [(1, Witness(320))], q_c: 0 }), Single(Expression { mul_terms: [], linear_combinations: [(1, Witness(321))], q_c: 0 }), Single(Expression { mul_terms: [], linear_combinations: [(1, Witness(321))], q_c: 0 })], outputs: [Simple(Witness(328)), Simple(Witness(329)), Simple(Witness(330))]
EXPR [ (1, _320, _320) (-1, _331) 0 ]
EXPR [ (1, _320, _321) (-1, _332) 0 ]
EXPR [ (555, _328) (-1, _333) 1 ]
EXPR [ (-555, _328) (-1, _334) 1 ]
EXPR [ (1, _321, _321) (-1, _335) 0 ]
EXPR [ (1, _331, _335) (-1, _336) 0 ]
EXPR [ (1, _329, _333) (-2, _332) 0 ]
EXPR [ (1, _330, _334) (1, _331) (-1, _335) 0 ]
EXPR [ (-1, _328) (1, _336) 0 ]
BRILLIG CALL func 1: PREDICATE = %EXPR [ 1 ]%
inputs: [Single(Expression { mul_terms: [], linear_combinations: [(1, Witness(329))], q_c: 0 }), Single(Expression { mul_terms: [], linear_combinations: [(1, Witness(329))], q_c: 0 }), Single(Expression { mul_terms: [], linear_combinations: [(1, Witness(330))], q_c: 0 }), Single(Expression { mul_terms: [], linear_combinations: [(1, Witness(330))], q_c: 0 })], outputs: [Simple(Witness(337)), Simple(Witness(338)), Simple(Witness(339))]
EXPR [ (1, _329, _329) (-1, _340) 0 ]
EXPR [ (1, _329, _330) (-1, _341) 0 ]
EXPR [ (555, _337) (-1, _342) 1 ]
EXPR [ (-555, _337) (-1, _343) 1 ]
EXPR [ (1, _330, _330) (-1, _344) 0 ]
EXPR [ (1, _340, _344) (-1, _345) 0 ]
EXPR [ (1, _338, _342) (-2, _341) 0 ]
EXPR [ (1, _339, _343) (1, _340) (-1, _344) 0 ]
EXPR [ (-1, _337) (1, _345) 0 ]
BRILLIG CALL func 1: PREDICATE = %EXPR [ 1 ]%
inputs: [Single(Expression { mul_terms: [], linear_combinations: [(1, Witness(338))], q_c: 0 }), Single(Expression { mul_terms: [], linear_combinations: [(1, Witness(338))], q_c: 0 }), Single(Expression { mul_terms: [], linear_combinations: [(1, Witness(339))], q_c: 0 }), Single(Expression { mul_terms: [], linear_combinations: [(1, Witness(339))], q_c: 0 })], outputs: [Simple(Witness(346)), Simple(Witness(347)), Simple(Witness(348))]
EXPR [ (1, _338, _338) (-1, _349) 0 ]
EXPR [ (1, _338, _339) (-1, _350) 0 ]
EXPR [ (555, _346) (-1, _351) 1 ]
EXPR [ (-555, _346) (-1, _352) 1 ]
EXPR [ (1, _339, _339) (-1, _353) 0 ]
EXPR [ (1, _349, _353) (-1, _354) 0 ]
EXPR [ (1, _347, _351) (-2, _350) 0 ]
EXPR [ (1, _348, _352) (1, _349) (-1, _353) 0 ]
EXPR [ (-1, _346) (1, _354) 0 ]
BRILLIG CALL func 1: PREDICATE = %EXPR [ 1 ]%
inputs: [Single(Expression { mul_terms: [], linear_combinations: [(1, Witness(347))], q_c: 0 }), Single(Expression { mul_terms: [], linear_combinations: [(1, Witness(347))], q_c: 0 }), Single(Expression { mul_terms: [], linear_combinations: [(1, Witness(348))], q_c: 0 }), Single(Expression { mul_terms: [], linear_combinations: [(1, Witness(348))], q_c: 0 })], outputs: [Simple(Witness(355)), Simple(Witness(356)), Simple(Witness(357))]
EXPR [ (1, _347, _347) (-1, _358) 0 ]
EXPR [ (1, _347, _348) (-1, _359) 0 ]
EXPR [ (555, _355) (-1, _360) 1 ]
EXPR [ (-555, _355) (-1, _361) 1 ]
EXPR [ (1, _348, _348) (-1, _362) 0 ]
EXPR [ (1, _358, _362) (-1, _363) 0 ]
EXPR [ (1, _356, _360) (-2, _359) 0 ]
EXPR [ (1, _357, _361) (1, _358) (-1, _362) 0 ]
EXPR [ (-1, _355) (1, _363) 0 ]
BRILLIG CALL func 1: PREDICATE = %EXPR [ 1 ]%
inputs: [Single(Expression { mul_terms: [], linear_combinations: [(1, Witness(356))], q_c: 0 }), Single(Expression { mul_terms: [], linear_combinations: [(1, Witness(356))], q_c: 0 }), Single(Expression { mul_terms: [], linear_combinations: [(1, Witness(357))], q_c: 0 }), Single(Expression { mul_terms: [], linear_combinations: [(1, Witness(357))], q_c: 0 })], outputs: [Simple(Witness(364)), Simple(Witness(365)), Simple(Witness(366))]
EXPR [ (1, _356, _356) (-1, _367) 0 ]
EXPR [ (1, _356, _357) (-1, _368) 0 ]
EXPR [ (555, _364) (-1, _369) 1 ]
EXPR [ (-555, _364) (-1, _370) 1 ]
EXPR [ (1, _357, _357) (-1, _371) 0 ]
EXPR [ (1, _367, _371) (-1, _372) 0 ]
EXPR [ (1, _365, _369) (-2, _368) 0 ]
EXPR [ (1, _366, _370) (1, _367) (-1, _371) 0 ]
EXPR [ (-1, _364) (1, _372) 0 ]
BRILLIG CALL func 1: PREDICATE = %EXPR [ 1 ]%
inputs: [Single(Expression { mul_terms: [], linear_combinations: [(1, Witness(365))], q_c: 0 }), Single(Expression { mul_terms: [], linear_combinations: [(1, Witness(365))], q_c: 0 }), Single(Expression { mul_terms: [], linear_combinations: [(1, Witness(366))], q_c: 0 }), Single(Expression { mul_terms: [], linear_combinations: [(1, Witness(366))], q_c: 0 })], outputs: [Simple(Witness(373)), Simple(Witness(374)), Simple(Witness(375))]
EXPR [ (1, _365, _365) (-1, _376) 0 ]
EXPR [ (1, _365, _366) (-1, _377) 0 ]
EXPR [ (555, _373) (-1, _378) 1 ]
EXPR [ (-555, _373) (-1, _379) 1 ]
EXPR [ (1, _366, _366) (-1, _380) 0 ]
EXPR [ (1, _376, _380) (-1, _381) 0 ]
EXPR [ (1, _374, _378) (-2, _377) 0 ]
EXPR [ (1, _375, _379) (1, _376) (-1, _380) 0 ]
EXPR [ (-1, _373) (1, _381) 0 ]
BRILLIG CALL func 1: PREDICATE = %EXPR [ 1 ]%
inputs: [Single(Expression { mul_terms: [], linear_combinations: [(1, Witness(374))], q_c: 0 }), Single(Expression { mul_terms: [], linear_combinations: [(1, Witness(374))], q_c: 0 }), Single(Expression { mul_terms: [], linear_combinations: [(1, Witness(375))], q_c: 0 }), Single(Expression { mul_terms: [], linear_combinations: [(1, Witness(375))], q_c: 0 })], outputs: [Simple(Witness(382)), Simple(Witness(383)), Simple(Witness(384))]
EXPR [ (1, _374, _374) (-1, _385) 0 ]
EXPR [ (1, _374, _375) (-1, _386) 0 ]
EXPR [ (555, _382) (-1, _387) 1 ]
EXPR [ (-555, _382) (-1, _388) 1 ]
EXPR [ (1, _375, _375) (-1, _389) 0 ]
EXPR [ (1, _385, _389) (-1, _390) 0 ]
EXPR [ (1, _383, _387) (-2, _386) 0 ]
EXPR [ (1, _384, _388) (1, _385) (-1, _389) 0 ]
EXPR [ (-1, _382) (1, _390) 0 ]
BRILLIG CALL func 1: PREDICATE = %EXPR [ 1 ]%
inputs: [Single(Expression { mul_terms: [], linear_combinations: [(1, Witness(383))], q_c: 0 }), Single(Expression { mul_terms: [], linear_combinations: [(1, Witness(383))], q_c: 0 }), Single(Expression { mul_terms: [], linear_combinations: [(1, Witness(384))], q_c: 0 }), Single(Expression { mul_terms: [], linear_combinations: [(1, Witness(384))], q_c: 0 })], outputs: [Simple(Witness(391)), Simple(Witness(392)), Simple(Witness(393))]
EXPR [ (1, _383, _383) (-1, _394) 0 ]
EXPR [ (1, _383, _384) (-1, _395) 0 ]
EXPR [ (555, _391) (-1, _396) 1 ]
EXPR [ (-555, _391) (-1, _397) 1 ]
EXPR [ (1, _384, _384) (-1, _398) 0 ]
EXPR [ (1, _394, _398) (-1, _399) 0 ]
EXPR [ (1, _392, _396) (-2, _395) 0 ]
EXPR [ (1, _393, _397) (1, _394) (-1, _398) 0 ]
EXPR [ (-1, _391) (1, _399) 0 ]
BRILLIG CALL func 1: PREDICATE = %EXPR [ 1 ]%
inputs: [Single(Expression { mul_terms: [], linear_combinations: [(1, Witness(392))], q_c: 0 }), Single(Expression { mul_terms: [], linear_combinations: [(1, Witness(392))], q_c: 0 }), Single(Expression { mul_terms: [], linear_combinations: [(1, Witness(393))], q_c: 0 }), Single(Expression { mul_terms: [], linear_combinations: [(1, Witness(393))], q_c: 0 })], outputs: [Simple(Witness(400)), Simple(Witness(401)), Simple(Witness(402))]
EXPR [ (1, _392, _392) (-1, _403) 0 ]
EXPR [ (1, _392, _393) (-1, _404) 0 ]
EXPR [ (555, _400) (-1, _405) 1 ]
EXPR [ (-555, _400) (-1, _406) 1 ]
EXPR [ (1, _393, _393) (-1, _407) 0 ]
EXPR [ (1, _403, _407) (-1, _408) 0 ]
EXPR [ (1, _401, _405) (-2, _404) 0 ]
EXPR [ (1, _402, _406) (1, _403) (-1, _407) 0 ]
EXPR [ (-1, _400) (1, _408) 0 ]
BRILLIG CALL func 1: PREDICATE = %EXPR [ 1 ]%
inputs: [Single(Expression { mul_terms: [], linear_combinations: [(1, Witness(401))], q_c: 0 }), Single(Expression { mul_terms: [], linear_combinations: [(1, Witness(401))], q_c: 0 }), Single(Expression { mul_terms: [], linear_combinations: [(1, Witness(402))], q_c: 0 }), Single(Expression { mul_terms: [], linear_combinations: [(1, Witness(402))], q_c: 0 })], outputs: [Simple(Witness(409)), Simple(Witness(410)), Simple(Witness(411))]
EXPR [ (1, _401, _401) (-1, _412) 0 ]
EXPR [ (1, _401, _402) (-1, _413) 0 ]
EXPR [ (555, _409) (-1, _414) 1 ]
EXPR [ (-555, _409) (-1, _415) 1 ]
EXPR [ (1, _402, _402) (-1, _416) 0 ]
EXPR [ (1, _412, _416) (-1, _417) 0 ]
EXPR [ (1, _410, _414) (-2, _413) 0 ]
EXPR [ (1, _411, _415) (1, _412) (-1, _416) 0 ]
EXPR [ (-1, _409) (1, _417) 0 ]
BRILLIG CALL func 1: PREDICATE = %EXPR [ 1 ]%
inputs: [Single(Expression { mul_terms: [], linear_combinations: [(1, Witness(410))], q_c: 0 }), Single(Expression { mul_terms: [], linear_combinations: [(1, Witness(410))], q_c: 0 }), Single(Expression { mul_terms: [], linear_combinations: [(1, Witness(411))], q_c: 0 }), Single(Expression { mul_terms: [], linear_combinations: [(1, Witness(411))], q_c: 0 })], outputs: [Simple(Witness(418)), Simple(Witness(419)), Simple(Witness(420))]
EXPR [ (1, _410, _410) (-1, _421) 0 ]
EXPR [ (1, _410, _411) (-1, _422) 0 ]
EXPR [ (555, _418) (-1, _423) 1 ]
EXPR [ (-555, _418) (-1, _424) 1 ]
EXPR [ (1, _411, _411) (-1, _425) 0 ]
EXPR [ (1, _421, _425) (-1, _426) 0 ]
EXPR [ (1, _419, _423) (-2, _422) 0 ]
EXPR [ (1, _420, _424) (1, _421) (-1, _425) 0 ]
EXPR [ (-1, _418) (1, _426) 0 ]
BRILLIG CALL func 1: PREDICATE = %EXPR [ 1 ]%
inputs: [Single(Expression { mul_terms: [], linear_combinations: [(1, Witness(419))], q_c: 0 }), Single(Expression { mul_terms: [], linear_combinations: [(1, Witness(419))], q_c: 0 }), Single(Expression { mul_terms: [], linear_combinations: [(1, Witness(420))], q_c: 0 }), Single(Expression { mul_terms: [], linear_combinations: [(1, Witness(420))], q_c: 0 })], outputs: [Simple(Witness(427)), Simple(Witness(428)), Simple(Witness(429))]
EXPR [ (1, _419, _419) (-1, _430) 0 ]
EXPR [ (1, _419, _420) (-1, _431) 0 ]
EXPR [ (555, _427) (-1, _432) 1 ]
EXPR [ (-555, _427) (-1, _433) 1 ]
EXPR [ (1, _420, _420) (-1, _434) 0 ]
EXPR [ (1, _430, _434) (-1, _435) 0 ]
EXPR [ (1, _428, _432) (-2, _431) 0 ]
EXPR [ (1, _429, _433) (1, _430) (-1, _434) 0 ]
EXPR [ (-1, _427) (1, _435) 0 ]
BRILLIG CALL func 1: PREDICATE = %EXPR [ 1 ]%
inputs: [Single(Expression { mul_terms: [], linear_combinations: [(1, Witness(428))], q_c: 0 }), Single(Expression { mul_terms: [], linear_combinations: [(1, Witness(428))], q_c: 0 }), Single(Expression { mul_terms: [], linear_combinations: [(1, Witness(429))], q_c: 0 }), Single(Expression { mul_terms: [], linear_combinations: [(1, Witness(429))], q_c: 0 })], outputs: [Simple(Witness(436)), Simple(Witness(437)), Simple(Witness(438))]
EXPR [ (1, _428, _428) (-1, _439) 0 ]
EXPR [ (1, _428, _429) (-1, _440) 0 ]
EXPR [ (555, _436) (-1, _441) 1 ]
EXPR [ (-555, _436) (-1, _442) 1 ]
EXPR [ (1, _429, _429) (-1, _443) 0 ]
EXPR [ (1, _439, _443) (-1, _444) 0 ]
EXPR [ (1, _437, _441) (-2, _440) 0 ]
EXPR [ (1, _438, _442) (1, _439) (-1, _443) 0 ]
EXPR [ (-1, _436) (1, _444) 0 ]
BRILLIG CALL func 1: PREDICATE = %EXPR [ 1 ]%
inputs: [Single(Expression { mul_terms: [], linear_combinations: [(1, Witness(437))], q_c: 0 }), Single(Expression { mul_terms: [], linear_combinations: [(1, Witness(437))], q_c: 0 }), Single(Expression { mul_terms: [], linear_combinations: [(1, Witness(438))], q_c: 0 }), Single(Expression { mul_terms: [], linear_combinations: [(1, Witness(438))], q_c: 0 })], outputs: [Simple(Witness(445)), Simple(Witness(446)), Simple(Witness(447))]
EXPR [ (1, _437, _437) (-1, _448) 0 ]
EXPR [ (1, _437, _438) (-1, _449) 0 ]
EXPR [ (555, _445) (-1, _450) 1 ]
EXPR [ (-555, _445) (-1, _451) 1 ]
EXPR [ (1, _438, _438) (-1, _452) 0 ]
EXPR [ (1, _448, _452) (-1, _453) 0 ]
EXPR [ (1, _446, _450) (-2, _449) 0 ]
EXPR [ (1, _447, _451) (1, _448) (-1, _452) 0 ]
EXPR [ (-1, _445) (1, _453) 0 ]
BRILLIG CALL func 1: PREDICATE = %EXPR [ 1 ]%
inputs: [Single(Expression { mul_terms: [], linear_combinations: [(1, Witness(446))], q_c: 0 }), Single(Expression { mul_terms: [], linear_combinations: [(1, Witness(446))], q_c: 0 }), Single(Expression { mul_terms: [], linear_combinations: [(1, Witness(447))], q_c: 0 }), Single(Expression { mul_terms: [], linear_combinations: [(1, Witness(447))], q_c: 0 })], outputs: [Simple(Witness(454)), Simple(Witness(455)), Simple(Witness(456))]
EXPR [ (1, _446, _446) (-1, _457) 0 ]
EXPR [ (1, _446, _447) (-1, _458) 0 ]
EXPR [ (555, _454) (-1, _459) 1 ]
EXPR [ (-555, _454) (-1, _460) 1 ]
EXPR [ (1, _447, _447) (-1, _461) 0 ]
EXPR [ (1, _457, _461) (-1, _462) 0 ]
EXPR [ (1, _455, _459) (-2, _458) 0 ]
EXPR [ (1, _456, _460) (1, _457) (-1, _461) 0 ]
EXPR [ (-1, _454) (1, _462) 0 ]
BRILLIG CALL func 1: PREDICATE = %EXPR [ 1 ]%
inputs: [Single(Expression { mul_terms: [], linear_combinations: [(1, Witness(455))], q_c: 0 }), Single(Expression { mul_terms: [], linear_combinations: [(1, Witness(455))], q_c: 0 }), Single(Expression { mul_terms: [], linear_combinations: [(1, Witness(456))], q_c: 0 }), Single(Expression { mul_terms: [], linear_combinations: [(1, Witness(456))], q_c: 0 })], outputs: [Simple(Witness(463)), Simple(Witness(464)), Simple(Witness(465))]
EXPR [ (1, _455, _455) (-1, _466) 0 ]
EXPR [ (1, _455, _456) (-1, _467) 0 ]
EXPR [ (555, _463) (-1, _468) 1 ]
EXPR [ (-555, _463) (-1, _469) 1 ]
EXPR [ (1, _456, _456) (-1, _470) 0 ]
EXPR [ (1, _466, _470) (-1, _471) 0 ]
EXPR [ (1, _464, _468) (-2, _467) 0 ]
EXPR [ (1, _465, _469) (1, _466) (-1, _470) 0 ]
EXPR [ (-1, _463) (1, _471) 0 ]
BRILLIG CALL func 1: PREDICATE = %EXPR [ 1 ]%
inputs: [Single(Expression { mul_terms: [], linear_combinations: [(1, Witness(464))], q_c: 0 }), Single(Expression { mul_terms: [], linear_combinations: [(1, Witness(464))], q_c: 0 }), Single(Expression { mul_terms: [], linear_combinations: [(1, Witness(465))], q_c: 0 }), Single(Expression { mul_terms: [], linear_combinations: [(1, Witness(465))], q_c: 0 })], outputs: [Simple(Witness(472)), Simple(Witness(473)), Simple(Witness(474))]
EXPR [ (1, _464, _464) (-1, _475) 0 ]
EXPR [ (1, _464, _465) (-1, _476) 0 ]
EXPR [ (555, _472) (-1, _477) 1 ]
EXPR [ (-555, _472) (-1, _478) 1 ]
EXPR [ (1, _465, _465) (-1, _479) 0 ]
EXPR [ (1, _475, _479) (-1, _480) 0 ]
EXPR [ (1, _473, _477) (-2, _476) 0 ]
EXPR [ (1, _474, _478) (1, _475) (-1, _479) 0 ]
EXPR [ (-1, _472) (1, _480) 0 ]
BRILLIG CALL func 1: PREDICATE = %EXPR [ 1 ]%
inputs: [Single(Expression { mul_terms: [], linear_combinations: [(1, Witness(473))], q_c: 0 }), Single(Expression { mul_terms: [], linear_combinations: [(1, Witness(473))], q_c: 0 }), Single(Expression { mul_terms: [], linear_combinations: [(1, Witness(474))], q_c: 0 }), Single(Expression { mul_terms: [], linear_combinations: [(1, Witness(474))], q_c: 0 })], outputs: [Simple(Witness(481)), Simple(Witness(482)), Simple(Witness(483))]
EXPR [ (1, _473, _473) (-1, _484) 0 ]
EXPR [ (1, _473, _474) (-1, _485) 0 ]
EXPR [ (555, _481) (-1, _486) 1 ]
EXPR [ (-555, _481) (-1, _487) 1 ]
EXPR [ (1, _474, _474) (-1, _488) 0 ]
EXPR [ (1, _484, _488) (-1, _489) 0 ]
EXPR [ (1, _482, _486) (-2, _485) 0 ]
EXPR [ (1, _483, _487) (1, _484) (-1, _488) 0 ]
EXPR [ (-1, _481) (1, _489) 0 ]
BRILLIG CALL func 1: PREDICATE = %EXPR [ 1 ]%
inputs: [Single(Expression { mul_terms: [], linear_combinations: [(1, Witness(482))], q_c: 0 }), Single(Expression { mul_terms: [], linear_combinations: [(1, Witness(482))], q_c: 0 }), Single(Expression { mul_terms: [], linear_combinations: [(1, Witness(483))], q_c: 0 }), Single(Expression { mul_terms: [], linear_combinations: [(1, Witness(483))], q_c: 0 })], outputs: [Simple(Witness(490)), Simple(Witness(491)), Simple(Witness(492))]
EXPR [ (1, _482, _482) (-1, _493) 0 ]
EXPR [ (1, _482, _483) (-1, _494) 0 ]
EXPR [ (555, _490) (-1, _495) 1 ]
EXPR [ (-555, _490) (-1, _496) 1 ]
EXPR [ (1, _483, _483) (-1, _497) 0 ]
EXPR [ (1, _493, _497) (-1, _498) 0 ]
EXPR [ (1, _491, _495) (-2, _494) 0 ]
EXPR [ (1, _492, _496) (1, _493) (-1, _497) 0 ]
EXPR [ (-1, _490) (1, _498) 0 ]
BRILLIG CALL func 1: PREDICATE = %EXPR [ 1 ]%
inputs: [Single(Expression { mul_terms: [], linear_combinations: [(1, Witness(491))], q_c: 0 }), Single(Expression { mul_terms: [], linear_combinations: [(1, Witness(491))], q_c: 0 }), Single(Expression { mul_terms: [], linear_combinations: [(1, Witness(492))], q_c: 0 }), Single(Expression { mul_terms: [], linear_combinations: [(1, Witness(492))], q_c: 0 })], outputs: [Simple(Witness(499)), Simple(Witness(500)), Simple(Witness(501))]
EXPR [ (1, _491, _491) (-1, _502) 0 ]
EXPR [ (1, _491, _492) (-1, _503) 0 ]
EXPR [ (555, _499) (-1, _504) 1 ]
EXPR [ (-555, _499) (-1, _505) 1 ]
EXPR [ (1, _492, _492) (-1, _506) 0 ]
EXPR [ (1, _502, _506) (-1, _507) 0 ]
EXPR [ (1, _500, _504) (-2, _503) 0 ]
EXPR [ (1, _501, _505) (1, _502) (-1, _506) 0 ]
EXPR [ (-1, _499) (1, _507) 0 ]
BRILLIG CALL func 1: PREDICATE = %EXPR [ 1 ]%
inputs: [Single(Expression { mul_terms: [], linear_combinations: [(1, Witness(500))], q_c: 0 }), Single(Expression { mul_terms: [], linear_combinations: [(1, Witness(500))], q_c: 0 }), Single(Expression { mul_terms: [], linear_combinations: [(1, Witness(501))], q_c: 0 }), Single(Expression { mul_terms: [], linear_combinations: [(1, Witness(501))], q_c: 0 })], outputs: [Simple(Witness(508)), Simple(Witness(509)), Simple(Witness(510))]
EXPR [ (1, _500, _500) (-1, _511) 0 ]
EXPR [ (1, _500, _501) (-1, _512) 0 ]
EXPR [ (555, _508) (-1, _513) 1 ]
EXPR [ (-555, _508) (-1, _514) 1 ]
EXPR [ (1, _501, _501) (-1, _515) 0 ]
EXPR [ (1, _511, _515) (-1, _516) 0 ]
EXPR [ (1, _509, _513) (-2, _512) 0 ]
EXPR [ (1, _510, _514) (1, _511) (-1, _515) 0 ]
EXPR [ (-1, _508) (1, _516) 0 ]
BRILLIG CALL func 1: PREDICATE = %EXPR [ 1 ]%
inputs: [Single(Expression { mul_terms: [], linear_combinations: [(1, Witness(509))], q_c: 0 }), Single(Expression { mul_terms: [], linear_combinations: [(1, Witness(509))], q_c: 0 }), Single(Expression { mul_terms: [], linear_combinations: [(1, Witness(510))], q_c: 0 }), Single(Expression { mul_terms: [], linear_combinations: [(1, Witness(510))], q_c: 0 })], outputs: [Simple(Witness(517)), Simple(Witness(518)), Simple(Witness(519))]
EXPR [ (1, _509, _509) (-1, _520) 0 ]
EXPR [ (1, _509, _510) (-1, _521) 0 ]
EXPR [ (555, _517) (-1, _522) 1 ]
EXPR [ (-555, _517) (-1, _523) 1 ]
EXPR [ (1, _510, _510) (-1, _524) 0 ]
EXPR [ (1, _520, _524) (-1, _525) 0 ]
EXPR [ (1, _518, _522) (-2, _521) 0 ]
EXPR [ (1, _519, _523) (1, _520) (-1, _524) 0 ]
EXPR [ (-1, _517) (1, _525) 0 ]
BRILLIG CALL func 1: PREDICATE = %EXPR [ 1 ]%
inputs: [Single(Expression { mul_terms: [], linear_combinations: [(1, Witness(518))], q_c: 0 }), Single(Expression { mul_terms: [], linear_combinations: [(1, Witness(518))], q_c: 0 }), Single(Expression { mul_terms: [], linear_combinations: [(1, Witness(519))], q_c: 0 }), Single(Expression { mul_terms: [], linear_combinations: [(1, Witness(519))], q_c: 0 })], outputs: [Simple(Witness(526)), Simple(Witness(527)), Simple(Witness(528))]
EXPR [ (1, _518, _518) (-1, _529) 0 ]
EXPR [ (1, _518, _519) (-1, _530) 0 ]
EXPR [ (555, _526) (-1, _531) 1 ]
EXPR [ (-555, _526) (-1, _532) 1 ]
EXPR [ (1, _519, _519) (-1, _533) 0 ]
EXPR [ (1, _529, _533) (-1, _534) 0 ]
EXPR [ (1, _527, _531) (-2, _530) 0 ]
EXPR [ (1, _528, _532) (1, _529) (-1, _533) 0 ]
EXPR [ (-1, _526) (1, _534) 0 ]
BRILLIG CALL func 1: PREDICATE = %EXPR [ 1 ]%
inputs: [Single(Expression { mul_terms: [], linear_combinations: [(1, Witness(527))], q_c: 0 }), Single(Expression { mul_terms: [], linear_combinations: [(1, Witness(527))], q_c: 0 }), Single(Expression { mul_terms: [], linear_combinations: [(1, Witness(528))], q_c: 0 }), Single(Expression { mul_terms: [], linear_combinations: [(1, Witness(528))], q_c: 0 })], outputs: [Simple(Witness(535)), Simple(Witness(536)), Simple(Witness(537))]
EXPR [ (1, _527, _527) (-1, _538) 0 ]
EXPR [ (1, _527, _528) (-1, _539) 0 ]
EXPR [ (555, _535) (-1, _540) 1 ]
EXPR [ (-555, _535) (-1, _541) 1 ]
EXPR [ (1, _528, _528) (-1, _542) 0 ]
EXPR [ (1, _538, _542) (-1, _543) 0 ]
EXPR [ (1, _536, _540) (-2, _539) 0 ]
EXPR [ (1, _537, _541) (1, _538) (-1, _542) 0 ]
EXPR [ (-1, _535) (1, _543) 0 ]
BRILLIG CALL func 1: PREDICATE = %EXPR [ 1 ]%
inputs: [Single(Expression { mul_terms: [], linear_combinations: [(1, Witness(536))], q_c: 0 }), Single(Expression { mul_terms: [], linear_combinations: [(1, Witness(536))], q_c: 0 }), Single(Expression { mul_terms: [], linear_combinations: [(1, Witness(537))], q_c: 0 }), Single(Expression { mul_terms: [], linear_combinations: [(1, Witness(537))], q_c: 0 })], outputs: [Simple(Witness(544)), Simple(Witness(545)), Simple(Witness(546))]
EXPR [ (1, _536, _536) (-1, _547) 0 ]
EXPR [ (1, _536, _537) (-1, _548) 0 ]
EXPR [ (555, _544) (-1, _549) 1 ]
EXPR [ (-555, _544) (-1, _550) 1 ]
EXPR [ (1, _537, _537) (-1, _551) 0 ]
EXPR [ (1, _547, _551) (-1, _552) 0 ]
EXPR [ (1, _545, _549) (-2, _548) 0 ]
EXPR [ (1, _546, _550) (1, _547) (-1, _551) 0 ]
EXPR [ (-1, _544) (1, _552) 0 ]
BRILLIG CALL func 1: PREDICATE = %EXPR [ 1 ]%
inputs: [Single(Expression { mul_terms: [], linear_combinations: [(1, Witness(545))], q_c: 0 }), Single(Expression { mul_terms: [], linear_combinations: [(1, Witness(545))], q_c: 0 }), Single(Expression { mul_terms: [], linear_combinations: [(1, Witness(546))], q_c: 0 }), Single(Expression { mul_terms: [], linear_combinations: [(1, Witness(546))], q_c: 0 })], outputs: [Simple(Witness(553)), Simple(Witness(554)), Simple(Witness(555))]
EXPR [ (1, _545, _545) (-1, _556) 0 ]
EXPR [ (1, _545, _546) (-1, _557) 0 ]
EXPR [ (555, _553) (-1, _558) 1 ]
EXPR [ (-555, _553) (-1, _559) 1 ]
EXPR [ (1, _546, _546) (-1, _560) 0 ]
EXPR [ (1, _556, _560) (-1, _561) 0 ]
EXPR [ (1, _554, _558) (-2, _557) 0 ]
EXPR [ (1, _555, _559) (1, _556) (-1, _560) 0 ]
EXPR [ (-1, _553) (1, _561) 0 ]
BRILLIG CALL func 1: PREDICATE = %EXPR [ 1 ]%
inputs: [Single(Expression { mul_terms: [], linear_combinations: [(1, Witness(554))], q_c: 0 }), Single(Expression { mul_terms: [], linear_combinations: [(1, Witness(554))], q_c: 0 }), Single(Expression { mul_terms: [], linear_combinations: [(1, Witness(555))], q_c: 0 }), Single(Expression { mul_terms: [], linear_combinations: [(1, Witness(555))], q_c: 0 })], outputs: [Simple(Witness(562)), Simple(Witness(563)), Simple(Witness(564))]
EXPR [ (1, _554, _554) (-1, _565) 0 ]
EXPR [ (1, _554, _555) (-1, _566) 0 ]
EXPR [ (555, _562) (-1, _567) 1 ]
EXPR [ (-555, _562) (-1, _568) 1 ]
EXPR [ (1, _555, _555) (-1, _569) 0 ]
EXPR [ (1, _565, _569) (-1, _570) 0 ]
EXPR [ (1, _563, _567) (-2, _566) 0 ]
EXPR [ (1, _564, _568) (1, _565) (-1, _569) 0 ]
EXPR [ (-1, _562) (1, _570) 0 ]
BRILLIG CALL func 1: PREDICATE = %EXPR [ 1 ]%
inputs: [Single(Expression { mul_terms: [], linear_combinations: [(1, Witness(563))], q_c: 0 }), Single(Expression { mul_terms: [], linear_combinations: [(1, Witness(563))], q_c: 0 }), Single(Expression { mul_terms: [], linear_combinations: [(1, Witness(564))], q_c: 0 }), Single(Expression { mul_terms: [], linear_combinations: [(1, Witness(564))], q_c: 0 })], outputs: [Simple(Witness(571)), Simple(Witness(572)), Simple(Witness(573))]
EXPR [ (1, _563, _563) (-1, _574) 0 ]
EXPR [ (1, _563, _564) (-1, _575) 0 ]
EXPR [ (555, _571) (-1, _576) 1 ]
EXPR [ (-555, _571) (-1, _577) 1 ]
EXPR [ (1, _564, _564) (-1, _578) 0 ]
EXPR [ (1, _574, _578) (-1, _579) 0 ]
EXPR [ (1, _572, _576) (-2, _575) 0 ]
EXPR [ (1, _573, _577) (1, _574) (-1, _578) 0 ]
EXPR [ (-1, _571) (1, _579) 0 ]
BRILLIG CALL func 1: PREDICATE = %EXPR [ 1 ]%
inputs: [Single(Expression { mul_terms: [], linear_combinations: [(1, Witness(572))], q_c: 0 }), Single(Expression { mul_terms: [], linear_combinations: [(1, Witness(572))], q_c: 0 }), Single(Expression { mul_terms: [], linear_combinations: [(1, Witness(573))], q_c: 0 }), Single(Expression { mul_terms: [], linear_combinations: [(1, Witness(573))], q_c: 0 })], outputs: [Simple(Witness(580)), Simple(Witness(581)), Simple(Witness(582))]
EXPR [ (1, _572, _572) (-1, _583) 0 ]
EXPR [ (1, _572, _573) (-1, _584) 0 ]
EXPR [ (555, _580) (-1, _585) 1 ]
EXPR [ (-555, _580) (-1, _586) 1 ]
EXPR [ (1, _573, _573) (-1, _587) 0 ]
EXPR [ (1, _583, _587) (-1, _588) 0 ]
EXPR [ (1, _581, _585) (-2, _584) 0 ]
EXPR [ (1, _582, _586) (1, _583) (-1, _587) 0 ]
EXPR [ (-1, _580) (1, _588) 0 ]
BRILLIG CALL func 1: PREDICATE = %EXPR [ 1 ]%
inputs: [Single(Expression { mul_terms: [], linear_combinations: [(1, Witness(581))], q_c: 0 }), Single(Expression { mul_terms: [], linear_combinations: [(1, Witness(581))], q_c: 0 }), Single(Expression { mul_terms: [], linear_combinations: [(1, Witness(582))], q_c: 0 }), Single(Expression { mul_terms: [], linear_combinations: [(1, Witness(582))], q_c: 0 })], outputs: [Simple(Witness(589)), Simple(Witness(590)), Simple(Witness(591))]
EXPR [ (1, _581, _581) (-1, _592) 0 ]
EXPR [ (1, _581, _582) (-1, _593) 0 ]
EXPR [ (555, _589) (-1, _594) 1 ]
EXPR [ (-555, _589) (-1, _595) 1 ]
EXPR [ (1, _582, _582) (-1, _596) 0 ]
EXPR [ (1, _592, _596) (-1, _597) 0 ]
EXPR [ (1, _590, _594) (-2, _593) 0 ]
EXPR [ (1, _591, _595) (1, _592) (-1, _596) 0 ]
EXPR [ (-1, _589) (1, _597) 0 ]
BRILLIG CALL func 1: PREDICATE = %EXPR [ 1 ]%
inputs: [Single(Expression { mul_terms: [], linear_combinations: [(1, Witness(590))], q_c: 0 }), Single(Expression { mul_terms: [], linear_combinations: [(1, Witness(590))], q_c: 0 }), Single(Expression { mul_terms: [], linear_combinations: [(1, Witness(591))], q_c: 0 }), Single(Expression { mul_terms: [], linear_combinations: [(1, Witness(591))], q_c: 0 })], outputs: [Simple(Witness(598)), Simple(Witness(599)), Simple(Witness(600))]
EXPR [ (1, _590, _590) (-1, _601) 0 ]
EXPR [ (1, _590, _591) (-1, _602) 0 ]
EXPR [ (555, _598) (-1, _603) 1 ]
EXPR [ (-555, _598) (-1, _604) 1 ]
EXPR [ (1, _591, _591) (-1, _605) 0 ]
EXPR [ (1, _601, _605) (-1, _606) 0 ]
EXPR [ (1, _599, _603) (-2, _602) 0 ]
EXPR [ (1, _600, _604) (1, _601) (-1, _605) 0 ]
EXPR [ (-1, _598) (1, _606) 0 ]
BRILLIG CALL func 1: PREDICATE = %EXPR [ 1 ]%
inputs: [Single(Expression { mul_terms: [], linear_combinations: [(1, Witness(599))], q_c: 0 }), Single(Expression { mul_terms: [], linear_combinations: [(1, Witness(599))], q_c: 0 }), Single(Expression { mul_terms: [], linear_combinations: [(1, Witness(600))], q_c: 0 }), Single(Expression { mul_terms: [], linear_combinations: [(1, Witness(600))], q_c: 0 })], outputs: [Simple(Witness(607)), Simple(Witness(608)), Simple(Witness(609))]
EXPR [ (1, _599, _599) (-1, _610) 0 ]
EXPR [ (1, _599, _600) (-1, _611) 0 ]
EXPR [ (555, _607) (-1, _612) 1 ]
EXPR [ (-555, _607) (-1, _613) 1 ]
EXPR [ (1, _600, _600) (-1, _614) 0 ]
EXPR [ (1, _610, _614) (-1, _615) 0 ]
EXPR [ (1, _608, _612) (-2, _611) 0 ]
EXPR [ (1, _609, _613) (1, _610) (-1, _614) 0 ]
EXPR [ (-1, _607) (1, _615) 0 ]
BRILLIG CALL func 1: PREDICATE = %EXPR [ 1 ]%
inputs: [Single(Expression { mul_terms: [], linear_combinations: [(1, Witness(608))], q_c: 0 }), Single(Expression { mul_terms: [], linear_combinations: [(1, Witness(608))], q_c: 0 }), Single(Expression { mul_terms: [], linear_combinations: [(1, Witness(609))], q_c: 0 }), Single(Expression { mul_terms: [], linear_combinations: [(1, Witness(609))], q_c: 0 })], outputs: [Simple(Witness(616)), Simple(Witness(617)), Simple(Witness(618))]
EXPR [ (1, _608, _608) (-1, _619) 0 ]
EXPR [ (1, _608, _609) (-1, _620) 0 ]
EXPR [ (555, _616) (-1, _621) 1 ]
EXPR [ (-555, _616) (-1, _622) 1 ]
EXPR [ (1, _609, _609) (-1, _623) 0 ]
EXPR [ (1, _619, _623) (-1, _624) 0 ]
EXPR [ (1, _617, _621) (-2, _620) 0 ]
EXPR [ (1, _618, _622) (1, _619) (-1, _623) 0 ]
EXPR [ (-1, _616) (1, _624) 0 ]
BRILLIG CALL func 1: PREDICATE = %EXPR [ 1 ]%
inputs: [Single(Expression { mul_terms: [], linear_combinations: [(1, Witness(617))], q_c: 0 }), Single(Expression { mul_terms: [], linear_combinations: [(1, Witness(617))], q_c: 0 }), Single(Expression { mul_terms: [], linear_combinations: [(1, Witness(618))], q_c: 0 }), Single(Expression { mul_terms: [], linear_combinations: [(1, Witness(618))], q_c: 0 })], outputs: [Simple(Witness(625)), Simple(Witness(626)), Simple(Witness(627))]
EXPR [ (1, _617, _617) (-1, _628) 0 ]
EXPR [ (1, _617, _618) (-1, _629) 0 ]
EXPR [ (555, _625) (-1, _630) 1 ]
EXPR [ (-555, _625) (-1, _631) 1 ]
EXPR [ (1, _618, _618) (-1, _632) 0 ]
EXPR [ (1, _628, _632) (-1, _633) 0 ]
EXPR [ (1, _626, _630) (-2, _629) 0 ]
EXPR [ (1, _627, _631) (1, _628) (-1, _632) 0 ]
EXPR [ (-1, _625) (1, _633) 0 ]
BRILLIG CALL func 1: PREDICATE = %EXPR [ 1 ]%
inputs: [Single(Expression { mul_terms: [], linear_combinations: [(1, Witness(626))], q_c: 0 }), Single(Expression { mul_terms: [], linear_combinations: [(1, Witness(626))], q_c: 0 }), Single(Expression { mul_terms: [], linear_combinations: [(1, Witness(627))], q_c: 0 }), Single(Expression { mul_terms: [], linear_combinations: [(1, Witness(627))], q_c: 0 })], outputs: [Simple(Witness(634)), Simple(Witness(635)), Simple(Witness(636))]
EXPR [ (1, _626, _626) (-1, _637) 0 ]
EXPR [ (1, _626, _627) (-1, _638) 0 ]
EXPR [ (555, _634) (-1, _639) 1 ]
EXPR [ (-555, _634) (-1, _640) 1 ]
EXPR [ (1, _627, _627) (-1, _641) 0 ]
EXPR [ (1, _637, _641) (-1, _642) 0 ]
EXPR [ (1, _635, _639) (-2, _638) 0 ]
EXPR [ (1, _636, _640) (1, _637) (-1, _641) 0 ]
EXPR [ (-1, _634) (1, _642) 0 ]
BRILLIG CALL func 1: PREDICATE = %EXPR [ 1 ]%
inputs: [Single(Expression { mul_terms: [], linear_combinations: [(1, Witness(635))], q_c: 0 }), Single(Expression { mul_terms: [], linear_combinations: [(1, Witness(635))], q_c: 0 }), Single(Expression { mul_terms: [], linear_combinations: [(1, Witness(636))], q_c: 0 }), Single(Expression { mul_terms: [], linear_combinations: [(1, Witness(636))], q_c: 0 })], outputs: [Simple(Witness(643)), Simple(Witness(644)), Simple(Witness(645))]
EXPR [ (1, _635, _635) (-1, _646) 0 ]
EXPR [ (1, _635, _636) (-1, _647) 0 ]
EXPR [ (555, _643) (-1, _648) 1 ]
EXPR [ (-555, _643) (-1, _649) 1 ]
EXPR [ (1, _636, _636) (-1, _650) 0 ]
EXPR [ (1, _646, _650) (-1, _651) 0 ]
EXPR [ (1, _644, _648) (-2, _647) 0 ]
EXPR [ (1, _645, _649) (1, _646) (-1, _650) 0 ]
EXPR [ (-1, _643) (1, _651) 0 ]
BRILLIG CALL func 1: PREDICATE = %EXPR [ 1 ]%
inputs: [Single(Expression { mul_terms: [], linear_combinations: [(1, Witness(644))], q_c: 0 }), Single(Expression { mul_terms: [], linear_combinations: [(1, Witness(644))], q_c: 0 }), Single(Expression { mul_terms: [], linear_combinations: [(1, Witness(645))], q_c: 0 }), Single(Expression { mul_terms: [], linear_combinations: [(1, Witness(645))], q_c: 0 })], outputs: [Simple(Witness(652)), Simple(Witness(653)), Simple(Witness(654))]
EXPR [ (1, _644, _644) (-1, _655) 0 ]
EXPR [ (1, _644, _645) (-1, _656) 0 ]
EXPR [ (555, _652) (-1, _657) 1 ]
EXPR [ (-555, _652) (-1, _658) 1 ]
EXPR [ (1, _645, _645) (-1, _659) 0 ]
EXPR [ (1, _655, _659) (-1, _660) 0 ]
EXPR [ (1, _653, _657) (-2, _656) 0 ]
EXPR [ (1, _654, _658) (1, _655) (-1, _659) 0 ]
EXPR [ (-1, _652) (1, _660) 0 ]
BRILLIG CALL func 1: PREDICATE = %EXPR [ 1 ]%
inputs: [Single(Expression { mul_terms: [], linear_combinations: [(1, Witness(653))], q_c: 0 }), Single(Expression { mul_terms: [], linear_combinations: [(1, Witness(653))], q_c: 0 }), Single(Expression { mul_terms: [], linear_combinations: [(1, Witness(654))], q_c: 0 }), Single(Expression { mul_terms: [], linear_combinations: [(1, Witness(654))], q_c: 0 })], outputs: [Simple(Witness(661)), Simple(Witness(662)), Simple(Witness(663))]
EXPR [ (1, _653, _653) (-1, _664) 0 ]
EXPR [ (1, _653, _654) (-1, _665) 0 ]
EXPR [ (555, _661) (-1, _666) 1 ]
EXPR [ (-555, _661) (-1, _667) 1 ]
EXPR [ (1, _654, _654) (-1, _668) 0 ]
EXPR [ (1, _664, _668) (-1, _669) 0 ]
EXPR [ (1, _662, _666) (-2, _665) 0 ]
EXPR [ (1, _663, _667) (1, _664) (-1, _668) 0 ]
EXPR [ (-1, _661) (1, _669) 0 ]
BRILLIG CALL func 1: PREDICATE = %EXPR [ 1 ]%
inputs: [Single(Expression { mul_terms: [], linear_combinations: [(1, Witness(662))], q_c: 0 }), Single(Expression { mul_terms: [], linear_combinations: [(1, Witness(662))], q_c: 0 }), Single(Expression { mul_terms: [], linear_combinations: [(1, Witness(663))], q_c: 0 }), Single(Expression { mul_terms: [], linear_combinations: [(1, Witness(663))], q_c: 0 })], outputs: [Simple(Witness(670)), Simple(Witness(671)), Simple(Witness(672))]
EXPR [ (1, _662, _662) (-1, _673) 0 ]
EXPR [ (1, _662, _663) (-1, _674) 0 ]
EXPR [ (555, _670) (-1, _675) 1 ]
EXPR [ (-555, _670) (-1, _676) 1 ]
EXPR [ (1, _663, _663) (-1, _677) 0 ]
EXPR [ (1, _673, _677) (-1, _678) 0 ]
EXPR [ (1, _671, _675) (-2, _674) 0 ]
EXPR [ (1, _672, _676) (1, _673) (-1, _677) 0 ]
EXPR [ (-1, _670) (1, _678) 0 ]
BRILLIG CALL func 1: PREDICATE = %EXPR [ 1 ]%
inputs: [Single(Expression { mul_terms: [], linear_combinations: [(1, Witness(671))], q_c: 0 }), Single(Expression { mul_terms: [], linear_combinations: [(1, Witness(671))], q_c: 0 }), Single(Expression { mul_terms: [], linear_combinations: [(1, Witness(672))], q_c: 0 }), Single(Expression { mul_terms: [], linear_combinations: [(1, Witness(672))], q_c: 0 })], outputs: [Simple(Witness(679)), Simple(Witness(680)), Simple(Witness(681))]
EXPR [ (1, _671, _671) (-1, _682) 0 ]
EXPR [ (1, _671, _672) (-1, _683) 0 ]
EXPR [ (555, _679) (-1, _684) 1 ]
EXPR [ (-555, _679) (-1, _685) 1 ]
EXPR [ (1, _672, _672) (-1, _686) 0 ]
EXPR [ (1, _682, _686) (-1, _687) 0 ]
EXPR [ (1, _680, _684) (-2, _683) 0 ]
EXPR [ (1, _681, _685) (1, _682) (-1, _686) 0 ]
EXPR [ (-1, _679) (1, _687) 0 ]
BRILLIG CALL func 1: PREDICATE = %EXPR [ 1 ]%
inputs: [Single(Expression { mul_terms: [], linear_combinations: [(1, Witness(680))], q_c: 0 }), Single(Expression { mul_terms: [], linear_combinations: [(1, Witness(680))], q_c: 0 }), Single(Expression { mul_terms: [], linear_combinations: [(1, Witness(681))], q_c: 0 }), Single(Expression { mul_terms: [], linear_combinations: [(1, Witness(681))], q_c: 0 })], outputs: [Simple(Witness(688)), Simple(Witness(689)), Simple(Witness(690))]
EXPR [ (1, _680, _680) (-1, _691) 0 ]
EXPR [ (1, _680, _681) (-1, _692) 0 ]
EXPR [ (555, _688) (-1, _693) 1 ]
EXPR [ (-555, _688) (-1, _694) 1 ]
EXPR [ (1, _681, _681) (-1, _695) 0 ]
EXPR [ (1, _691, _695) (-1, _696) 0 ]
EXPR [ (1, _689, _693) (-2, _692) 0 ]
EXPR [ (1, _690, _694) (1, _691) (-1, _695) 0 ]
EXPR [ (-1, _688) (1, _696) 0 ]
BRILLIG CALL func 1: PREDICATE = %EXPR [ 1 ]%
inputs: [Single(Expression { mul_terms: [], linear_combinations: [(1, Witness(689))], q_c: 0 }), Single(Expression { mul_terms: [], linear_combinations: [(1, Witness(689))], q_c: 0 }), Single(Expression { mul_terms: [], linear_combinations: [(1, Witness(690))], q_c: 0 }), Single(Expression { mul_terms: [], linear_combinations: [(1, Witness(690))], q_c: 0 })], outputs: [Simple(Witness(697)), Simple(Witness(698)), Simple(Witness(699))]
EXPR [ (1, _689, _689) (-1, _700) 0 ]
EXPR [ (1, _689, _690) (-1, _701) 0 ]
EXPR [ (555, _697) (-1, _702) 1 ]
EXPR [ (-555, _697) (-1, _703) 1 ]
EXPR [ (1, _690, _690) (-1, _704) 0 ]
EXPR [ (1, _700, _704) (-1, _705) 0 ]
EXPR [ (1, _698, _702) (-2, _701) 0 ]
EXPR [ (1, _699, _703) (1, _700) (-1, _704) 0 ]
EXPR [ (-1, _697) (1, _705) 0 ]
BRILLIG CALL func 1: PREDICATE = %EXPR [ 1 ]%
inputs: [Single(Expression { mul_terms: [], linear_combinations: [(1, Witness(698))], q_c: 0 }), Single(Expression { mul_terms: [], linear_combinations: [(1, Witness(698))], q_c: 0 }), Single(Expression { mul_terms: [], linear_combinations: [(1, Witness(699))], q_c: 0 }), Single(Expression { mul_terms: [], linear_combinations: [(1, Witness(699))], q_c: 0 })], outputs: [Simple(Witness(706)), Simple(Witness(707)), Simple(Witness(708))]
EXPR [ (1, _698, _698) (-1, _709) 0 ]
EXPR [ (1, _698, _699) (-1, _710) 0 ]
EXPR [ (555, _706) (-1, _711) 1 ]
EXPR [ (-555, _706) (-1, _712) 1 ]
EXPR [ (1, _699, _699) (-1, _713) 0 ]
EXPR [ (1, _709, _713) (-1, _714) 0 ]
EXPR [ (1, _707, _711) (-2, _710) 0 ]
EXPR [ (1, _708, _712) (1, _709) (-1, _713) 0 ]
EXPR [ (-1, _706) (1, _714) 0 ]
BRILLIG CALL func 1: PREDICATE = %EXPR [ 1 ]%
inputs: [Single(Expression { mul_terms: [], linear_combinations: [(1, Witness(707))], q_c: 0 }), Single(Expression { mul_terms: [], linear_combinations: [(1, Witness(707))], q_c: 0 }), Single(Expression { mul_terms: [], linear_combinations: [(1, Witness(708))], q_c: 0 }), Single(Expression { mul_terms: [], linear_combinations: [(1, Witness(708))], q_c: 0 })], outputs: [Simple(Witness(715)), Simple(Witness(716)), Simple(Witness(717))]
EXPR [ (1, _707, _707) (-1, _718) 0 ]
EXPR [ (1, _707, _708) (-1, _719) 0 ]
EXPR [ (555, _715) (-1, _720) 1 ]
EXPR [ (-555, _715) (-1, _721) 1 ]
EXPR [ (1, _708, _708) (-1, _722) 0 ]
EXPR [ (1, _718, _722) (-1, _723) 0 ]
EXPR [ (1, _716, _720) (-2, _719) 0 ]
EXPR [ (1, _717, _721) (1, _718) (-1, _722) 0 ]
EXPR [ (-1, _715) (1, _723) 0 ]
BRILLIG CALL func 1: PREDICATE = %EXPR [ 1 ]%
inputs: [Single(Expression { mul_terms: [], linear_combinations: [(1, Witness(716))], q_c: 0 }), Single(Expression { mul_terms: [], linear_combinations: [(1, Witness(716))], q_c: 0 }), Single(Expression { mul_terms: [], linear_combinations: [(1, Witness(717))], q_c: 0 }), Single(Expression { mul_terms: [], linear_combinations: [(1, Witness(717))], q_c: 0 })], outputs: [Simple(Witness(724)), Simple(Witness(725)), Simple(Witness(726))]
EXPR [ (1, _716, _716) (-1, _727) 0 ]
EXPR [ (1, _716, _717) (-1, _728) 0 ]
EXPR [ (555, _724) (-1, _729) 1 ]
EXPR [ (-555, _724) (-1, _730) 1 ]
EXPR [ (1, _717, _717) (-1, _731) 0 ]
EXPR [ (1, _727, _731) (-1, _732) 0 ]
EXPR [ (1, _725, _729) (-2, _728) 0 ]
EXPR [ (1, _726, _730) (1, _727) (-1, _731) 0 ]
EXPR [ (-1, _724) (1, _732) 0 ]
BRILLIG CALL func 1: PREDICATE = %EXPR [ 1 ]%
inputs: [Single(Expression { mul_terms: [], linear_combinations: [(1, Witness(725))], q_c: 0 }), Single(Expression { mul_terms: [], linear_combinations: [(1, Witness(725))], q_c: 0 }), Single(Expression { mul_terms: [], linear_combinations: [(1, Witness(726))], q_c: 0 }), Single(Expression { mul_terms: [], linear_combinations: [(1, Witness(726))], q_c: 0 })], outputs: [Simple(Witness(733)), Simple(Witness(734)), Simple(Witness(735))]
EXPR [ (1, _725, _725) (-1, _736) 0 ]
EXPR [ (1, _725, _726) (-1, _737) 0 ]
EXPR [ (555, _733) (-1, _738) 1 ]
EXPR [ (-555, _733) (-1, _739) 1 ]
EXPR [ (1, _726, _726) (-1, _740) 0 ]
EXPR [ (1, _736, _740) (-1, _741) 0 ]
EXPR [ (1, _734, _738) (-2, _737) 0 ]
EXPR [ (1, _735, _739) (1, _736) (-1, _740) 0 ]
EXPR [ (-1, _733) (1, _741) 0 ]
BRILLIG CALL func 1: PREDICATE = %EXPR [ 1 ]%
inputs: [Single(Expression { mul_terms: [], linear_combinations: [(1, Witness(734))], q_c: 0 }), Single(Expression { mul_terms: [], linear_combinations: [(1, Witness(734))], q_c: 0 }), Single(Expression { mul_terms: [], linear_combinations: [(1, Witness(735))], q_c: 0 }), Single(Expression { mul_terms: [], linear_combinations: [(1, Witness(735))], q_c: 0 })], outputs: [Simple(Witness(742)), Simple(Witness(743)), Simple(Witness(744))]
EXPR [ (1, _734, _734) (-1, _745) 0 ]
EXPR [ (1, _734, _735) (-1, _746) 0 ]
EXPR [ (555, _742) (-1, _747) 1 ]
EXPR [ (-555, _742) (-1, _748) 1 ]
EXPR [ (1, _735, _735) (-1, _749) 0 ]
EXPR [ (1, _745, _749) (-1, _750) 0 ]
EXPR [ (1, _743, _747) (-2, _746) 0 ]
EXPR [ (1, _744, _748) (1, _745) (-1, _749) 0 ]
EXPR [ (-1, _742) (1, _750) 0 ]
BRILLIG CALL func 1: PREDICATE = %EXPR [ 1 ]%
inputs: [Single(Expression { mul_terms: [], linear_combinations: [(1, Witness(743))], q_c: 0 }), Single(Expression { mul_terms: [], linear_combinations: [(1, Witness(743))], q_c: 0 }), Single(Expression { mul_terms: [], linear_combinations: [(1, Witness(744))], q_c: 0 }), Single(Expression { mul_terms: [], linear_combinations: [(1, Witness(744))], q_c: 0 })], outputs: [Simple(Witness(751)), Simple(Witness(752)), Simple(Witness(753))]
EXPR [ (1, _743, _743) (-1, _754) 0 ]
EXPR [ (1, _743, _744) (-1, _755) 0 ]
EXPR [ (555, _751) (-1, _756) 1 ]
EXPR [ (-555, _751) (-1, _757) 1 ]
EXPR [ (1, _744, _744) (-1, _758) 0 ]
EXPR [ (1, _754, _758) (-1, _759) 0 ]
EXPR [ (1, _752, _756) (-2, _755) 0 ]
EXPR [ (1, _753, _757) (1, _754) (-1, _758) 0 ]
EXPR [ (-1, _751) (1, _759) 0 ]
BRILLIG CALL func 1: PREDICATE = %EXPR [ 1 ]%
inputs: [Single(Expression { mul_terms: [], linear_combinations: [(1, Witness(752))], q_c: 0 }), Single(Expression { mul_terms: [], linear_combinations: [(1, Witness(752))], q_c: 0 }), Single(Expression { mul_terms: [], linear_combinations: [(1, Witness(753))], q_c: 0 }), Single(Expression { mul_terms: [], linear_combinations: [(1, Witness(753))], q_c: 0 })], outputs: [Simple(Witness(760)), Simple(Witness(761)), Simple(Witness(762))]
EXPR [ (1, _752, _752) (-1, _763) 0 ]
EXPR [ (1, _752, _753) (-1, _764) 0 ]
EXPR [ (555, _760) (-1, _765) 1 ]
EXPR [ (-555, _760) (-1, _766) 1 ]
EXPR [ (1, _753, _753) (-1, _767) 0 ]
EXPR [ (1, _763, _767) (-1, _768) 0 ]
EXPR [ (1, _761, _765) (-2, _764) 0 ]
EXPR [ (1, _762, _766) (1, _763) (-1, _767) 0 ]
EXPR [ (-1, _760) (1, _768) 0 ]
BRILLIG CALL func 1: PREDICATE = %EXPR [ 1 ]%
inputs: [Single(Expression { mul_terms: [], linear_combinations: [(1, Witness(761))], q_c: 0 }), Single(Expression { mul_terms: [], linear_combinations: [(1, Witness(761))], q_c: 0 }), Single(Expression { mul_terms: [], linear_combinations: [(1, Witness(762))], q_c: 0 }), Single(Expression { mul_terms: [], linear_combinations: [(1, Witness(762))], q_c: 0 })], outputs: [Simple(Witness(769)), Simple(Witness(770)), Simple(Witness(771))]
EXPR [ (1, _761, _761) (-1, _772) 0 ]
EXPR [ (1, _761, _762) (-1, _773) 0 ]
EXPR [ (555, _769) (-1, _774) 1 ]
EXPR [ (-555, _769) (-1, _775) 1 ]
EXPR [ (1, _762, _762) (-1, _776) 0 ]
EXPR [ (1, _772, _776) (-1, _777) 0 ]
EXPR [ (1, _770, _774) (-2, _773) 0 ]
EXPR [ (1, _771, _775) (1, _772) (-1, _776) 0 ]
EXPR [ (-1, _769) (1, _777) 0 ]
BRILLIG CALL func 1: PREDICATE = %EXPR [ 1 ]%
inputs: [Single(Expression { mul_terms: [], linear_combinations: [(1, Witness(770))], q_c: 0 }), Single(Expression { mul_terms: [], linear_combinations: [(1, Witness(770))], q_c: 0 }), Single(Expression { mul_terms: [], linear_combinations: [(1, Witness(771))], q_c: 0 }), Single(Expression { mul_terms: [], linear_combinations: [(1, Witness(771))], q_c: 0 })], outputs: [Simple(Witness(778)), Simple(Witness(779)), Simple(Witness(780))]
EXPR [ (1, _770, _770) (-1, _781) 0 ]
EXPR [ (1, _770, _771) (-1, _782) 0 ]
EXPR [ (555, _778) (-1, _783) 1 ]
EXPR [ (-555, _778) (-1, _784) 1 ]
EXPR [ (1, _771, _771) (-1, _785) 0 ]
EXPR [ (1, _781, _785) (-1, _786) 0 ]
EXPR [ (1, _779, _783) (-2, _782) 0 ]
EXPR [ (1, _780, _784) (1, _781) (-1, _785) 0 ]
EXPR [ (-1, _778) (1, _786) 0 ]
BRILLIG CALL func 1: PREDICATE = %EXPR [ 1 ]%
inputs: [Single(Expression { mul_terms: [], linear_combinations: [(1, Witness(779))], q_c: 0 }), Single(Expression { mul_terms: [], linear_combinations: [(1, Witness(779))], q_c: 0 }), Single(Expression { mul_terms: [], linear_combinations: [(1, Witness(780))], q_c: 0 }), Single(Expression { mul_terms: [], linear_combinations: [(1, Witness(780))], q_c: 0 })], outputs: [Simple(Witness(787)), Simple(Witness(788)), Simple(Witness(789))]
EXPR [ (1, _779, _779) (-1, _790) 0 ]
EXPR [ (1, _779, _780) (-1, _791) 0 ]
EXPR [ (555, _787) (-1, _792) 1 ]
EXPR [ (-555, _787) (-1, _793) 1 ]
EXPR [ (1, _780, _780) (-1, _794) 0 ]
EXPR [ (1, _790, _794) (-1, _795) 0 ]
EXPR [ (1, _788, _792) (-2, _791) 0 ]
EXPR [ (1, _789, _793) (1, _790) (-1, _794) 0 ]
EXPR [ (-1, _787) (1, _795) 0 ]
BRILLIG CALL func 1: PREDICATE = %EXPR [ 1 ]%
inputs: [Single(Expression { mul_terms: [], linear_combinations: [(1, Witness(788))], q_c: 0 }), Single(Expression { mul_terms: [], linear_combinations: [(1, Witness(788))], q_c: 0 }), Single(Expression { mul_terms: [], linear_combinations: [(1, Witness(789))], q_c: 0 }), Single(Expression { mul_terms: [], linear_combinations: [(1, Witness(789))], q_c: 0 })], outputs: [Simple(Witness(796)), Simple(Witness(797)), Simple(Witness(798))]
EXPR [ (1, _788, _788) (-1, _799) 0 ]
EXPR [ (1, _788, _789) (-1, _800) 0 ]
EXPR [ (555, _796) (-1, _801) 1 ]
EXPR [ (-555, _796) (-1, _802) 1 ]
EXPR [ (1, _789, _789) (-1, _803) 0 ]
EXPR [ (1, _799, _803) (-1, _804) 0 ]
EXPR [ (1, _797, _801) (-2, _800) 0 ]
EXPR [ (1, _798, _802) (1, _799) (-1, _803) 0 ]
EXPR [ (-1, _796) (1, _804) 0 ]
BRILLIG CALL func 1: PREDICATE = %EXPR [ 1 ]%
inputs: [Single(Expression { mul_terms: [], linear_combinations: [(1, Witness(797))], q_c: 0 }), Single(Expression { mul_terms: [], linear_combinations: [(1, Witness(797))], q_c: 0 }), Single(Expression { mul_terms: [], linear_combinations: [(1, Witness(798))], q_c: 0 }), Single(Expression { mul_terms: [], linear_combinations: [(1, Witness(798))], q_c: 0 })], outputs: [Simple(Witness(805)), Simple(Witness(806)), Simple(Witness(807))]
EXPR [ (1, _797, _797) (-1, _808) 0 ]
EXPR [ (1, _797, _798) (-1, _809) 0 ]
EXPR [ (555, _805) (-1, _810) 1 ]
EXPR [ (-555, _805) (-1, _811) 1 ]
EXPR [ (1, _798, _798) (-1, _812) 0 ]
EXPR [ (1, _808, _812) (-1, _813) 0 ]
EXPR [ (1, _806, _810) (-2, _809) 0 ]
EXPR [ (1, _807, _811) (1, _808) (-1, _812) 0 ]
EXPR [ (-1, _805) (1, _813) 0 ]
BRILLIG CALL func 1: PREDICATE = %EXPR [ 1 ]%
inputs: [Single(Expression { mul_terms: [], linear_combinations: [(1, Witness(806))], q_c: 0 }), Single(Expression { mul_terms: [], linear_combinations: [(1, Witness(806))], q_c: 0 }), Single(Expression { mul_terms: [], linear_combinations: [(1, Witness(807))], q_c: 0 }), Single(Expression { mul_terms: [], linear_combinations: [(1, Witness(807))], q_c: 0 })], outputs: [Simple(Witness(814)), Simple(Witness(815)), Simple(Witness(816))]
EXPR [ (1, _806, _806) (-1, _817) 0 ]
EXPR [ (1, _806, _807) (-1, _818) 0 ]
EXPR [ (555, _814) (-1, _819) 1 ]
EXPR [ (-555, _814) (-1, _820) 1 ]
EXPR [ (1, _807, _807) (-1, _821) 0 ]
EXPR [ (1, _817, _821) (-1, _822) 0 ]
EXPR [ (1, _815, _819) (-2, _818) 0 ]
EXPR [ (1, _816, _820) (1, _817) (-1, _821) 0 ]
EXPR [ (-1, _814) (1, _822) 0 ]
BRILLIG CALL func 1: PREDICATE = %EXPR [ 1 ]%
inputs: [Single(Expression { mul_terms: [], linear_combinations: [(1, Witness(815))], q_c: 0 }), Single(Expression { mul_terms: [], linear_combinations: [(1, Witness(815))], q_c: 0 }), Single(Expression { mul_terms: [], linear_combinations: [(1, Witness(816))], q_c: 0 }), Single(Expression { mul_terms: [], linear_combinations: [(1, Witness(816))], q_c: 0 })], outputs: [Simple(Witness(823)), Simple(Witness(824)), Simple(Witness(825))]
EXPR [ (1, _815, _815) (-1, _826) 0 ]
EXPR [ (1, _815, _816) (-1, _827) 0 ]
EXPR [ (555, _823) (-1, _828) 1 ]
EXPR [ (-555, _823) (-1, _829) 1 ]
EXPR [ (1, _816, _816) (-1, _830) 0 ]
EXPR [ (1, _826, _830) (-1, _831) 0 ]
EXPR [ (1, _824, _828) (-2, _827) 0 ]
EXPR [ (1, _825, _829) (1, _826) (-1, _830) 0 ]
EXPR [ (-1, _823) (1, _831) 0 ]
BRILLIG CALL func 1: PREDICATE = %EXPR [ 1 ]%
inputs: [Single(Expression { mul_terms: [], linear_combinations: [(1, Witness(824))], q_c: 0 }), Single(Expression { mul_terms: [], linear_combinations: [(1, Witness(824))], q_c: 0 }), Single(Expression { mul_terms: [], linear_combinations: [(1, Witness(825))], q_c: 0 }), Single(Expression { mul_terms: [], linear_combinations: [(1, Witness(825))], q_c: 0 })], outputs: [Simple(Witness(832)), Simple(Witness(833)), Simple(Witness(834))]
EXPR [ (1, _824, _824) (-1, _835) 0 ]
EXPR [ (1, _824, _825) (-1, _836) 0 ]
EXPR [ (555, _832) (-1, _837) 1 ]
EXPR [ (-555, _832) (-1, _838) 1 ]
EXPR [ (1, _825, _825) (-1, _839) 0 ]
EXPR [ (1, _835, _839) (-1, _840) 0 ]
EXPR [ (1, _833, _837) (-2, _836) 0 ]
EXPR [ (1, _834, _838) (1, _835) (-1, _839) 0 ]
EXPR [ (-1, _832) (1, _840) 0 ]
BRILLIG CALL func 1: PREDICATE = %EXPR [ 1 ]%
inputs: [Single(Expression { mul_terms: [], linear_combinations: [(1, Witness(833))], q_c: 0 }), Single(Expression { mul_terms: [], linear_combinations: [(1, Witness(833))], q_c: 0 }), Single(Expression { mul_terms: [], linear_combinations: [(1, Witness(834))], q_c: 0 }), Single(Expression { mul_terms: [], linear_combinations: [(1, Witness(834))], q_c: 0 })], outputs: [Simple(Witness(841)), Simple(Witness(842)), Simple(Witness(843))]
EXPR [ (1, _833, _833) (-1, _844) 0 ]
EXPR [ (1, _833, _834) (-1, _845) 0 ]
EXPR [ (555, _841) (-1, _846) 1 ]
EXPR [ (-555, _841) (-1, _847) 1 ]
EXPR [ (1, _834, _834) (-1, _848) 0 ]
EXPR [ (1, _844, _848) (-1, _849) 0 ]
EXPR [ (1, _842, _846) (-2, _845) 0 ]
EXPR [ (1, _843, _847) (1, _844) (-1, _848) 0 ]
EXPR [ (-1, _841) (1, _849) 0 ]
BRILLIG CALL func 1: PREDICATE = %EXPR [ 1 ]%
inputs: [Single(Expression { mul_terms: [], linear_combinations: [(1, Witness(842))], q_c: 0 }), Single(Expression { mul_terms: [], linear_combinations: [(1, Witness(842))], q_c: 0 }), Single(Expression { mul_terms: [], linear_combinations: [(1, Witness(843))], q_c: 0 }), Single(Expression { mul_terms: [], linear_combinations: [(1, Witness(843))], q_c: 0 })], outputs: [Simple(Witness(850)), Simple(Witness(851)), Simple(Witness(852))]
EXPR [ (1, _842, _842) (-1, _853) 0 ]
EXPR [ (1, _842, _843) (-1, _854) 0 ]
EXPR [ (555, _850) (-1, _855) 1 ]
EXPR [ (-555, _850) (-1, _856) 1 ]
EXPR [ (1, _843, _843) (-1, _857) 0 ]
EXPR [ (1, _853, _857) (-1, _858) 0 ]
EXPR [ (1, _851, _855) (-2, _854) 0 ]
EXPR [ (1, _852, _856) (1, _853) (-1, _857) 0 ]
EXPR [ (-1, _850) (1, _858) 0 ]
BRILLIG CALL func 1: PREDICATE = %EXPR [ 1 ]%
inputs: [Single(Expression { mul_terms: [], linear_combinations: [(1, Witness(851))], q_c: 0 }), Single(Expression { mul_terms: [], linear_combinations: [(1, Witness(851))], q_c: 0 }), Single(Expression { mul_terms: [], linear_combinations: [(1, Witness(852))], q_c: 0 }), Single(Expression { mul_terms: [], linear_combinations: [(1, Witness(852))], q_c: 0 })], outputs: [Simple(Witness(859)), Simple(Witness(860)), Simple(Witness(861))]
EXPR [ (1, _851, _851) (-1, _862) 0 ]
EXPR [ (1, _851, _852) (-1, _863) 0 ]
EXPR [ (555, _859) (-1, _864) 1 ]
EXPR [ (-555, _859) (-1, _865) 1 ]
EXPR [ (1, _852, _852) (-1, _866) 0 ]
EXPR [ (1, _862, _866) (-1, _867) 0 ]
EXPR [ (1, _860, _864) (-2, _863) 0 ]
EXPR [ (1, _861, _865) (1, _862) (-1, _866) 0 ]
EXPR [ (-1, _859) (1, _867) 0 ]
BRILLIG CALL func 1: PREDICATE = %EXPR [ 1 ]%
inputs: [Single(Expression { mul_terms: [], linear_combinations: [(1, Witness(860))], q_c: 0 }), Single(Expression { mul_terms: [], linear_combinations: [(1, Witness(860))], q_c: 0 }), Single(Expression { mul_terms: [], linear_combinations: [(1, Witness(861))], q_c: 0 }), Single(Expression { mul_terms: [], linear_combinations: [(1, Witness(861))], q_c: 0 })], outputs: [Simple(Witness(868)), Simple(Witness(869)), Simple(Witness(870))]
EXPR [ (1, _860, _860) (-1, _871) 0 ]
EXPR [ (1, _860, _861) (-1, _872) 0 ]
EXPR [ (555, _868) (-1, _873) 1 ]
EXPR [ (-555, _868) (-1, _874) 1 ]
EXPR [ (1, _861, _861) (-1, _875) 0 ]
EXPR [ (1, _871, _875) (-1, _876) 0 ]
EXPR [ (1, _869, _873) (-2, _872) 0 ]
EXPR [ (1, _870, _874) (1, _871) (-1, _875) 0 ]
EXPR [ (-1, _868) (1, _876) 0 ]
BRILLIG CALL func 1: PREDICATE = %EXPR [ 1 ]%
inputs: [Single(Expression { mul_terms: [], linear_combinations: [(1, Witness(869))], q_c: 0 }), Single(Expression { mul_terms: [], linear_combinations: [(1, Witness(869))], q_c: 0 }), Single(Expression { mul_terms: [], linear_combinations: [(1, Witness(870))], q_c: 0 }), Single(Expression { mul_terms: [], linear_combinations: [(1, Witness(870))], q_c: 0 })], outputs: [Simple(Witness(877)), Simple(Witness(878)), Simple(Witness(879))]
EXPR [ (1, _869, _869) (-1, _880) 0 ]
EXPR [ (1, _869, _870) (-1, _881) 0 ]
EXPR [ (555, _877) (-1, _882) 1 ]
EXPR [ (-555, _877) (-1, _883) 1 ]
EXPR [ (1, _870, _870) (-1, _884) 0 ]
EXPR [ (1, _880, _884) (-1, _885) 0 ]
EXPR [ (1, _878, _882) (-2, _881) 0 ]
EXPR [ (1, _879, _883) (1, _880) (-1, _884) 0 ]
EXPR [ (-1, _877) (1, _885) 0 ]
BRILLIG CALL func 1: PREDICATE = %EXPR [ 1 ]%
inputs: [Single(Expression { mul_terms: [], linear_combinations: [(1, Witness(878))], q_c: 0 }), Single(Expression { mul_terms: [], linear_combinations: [(1, Witness(878))], q_c: 0 }), Single(Expression { mul_terms: [], linear_combinations: [(1, Witness(879))], q_c: 0 }), Single(Expression { mul_terms: [], linear_combinations: [(1, Witness(879))], q_c: 0 })], outputs: [Simple(Witness(886)), Simple(Witness(887)), Simple(Witness(888))]
EXPR [ (1, _878, _878) (-1, _889) 0 ]
EXPR [ (1, _878, _879) (-1, _890) 0 ]
EXPR [ (555, _886) (-1, _891) 1 ]
EXPR [ (-555, _886) (-1, _892) 1 ]
EXPR [ (1, _879, _879) (-1, _893) 0 ]
EXPR [ (1, _889, _893) (-1, _894) 0 ]
EXPR [ (1, _887, _891) (-2, _890) 0 ]
EXPR [ (1, _888, _892) (1, _889) (-1, _893) 0 ]
EXPR [ (-1, _886) (1, _894) 0 ]
BRILLIG CALL func 1: PREDICATE = %EXPR [ 1 ]%
inputs: [Single(Expression { mul_terms: [], linear_combinations: [(1, Witness(887))], q_c: 0 }), Single(Expression { mul_terms: [], linear_combinations: [(1, Witness(887))], q_c: 0 }), Single(Expression { mul_terms: [], linear_combinations: [(1, Witness(888))], q_c: 0 }), Single(Expression { mul_terms: [], linear_combinations: [(1, Witness(888))], q_c: 0 })], outputs: [Simple(Witness(895)), Simple(Witness(896)), Simple(Witness(897))]
EXPR [ (1, _887, _887) (-1, _898) 0 ]
EXPR [ (1, _887, _888) (-1, _899) 0 ]
EXPR [ (555, _895) (-1, _900) 1 ]
EXPR [ (-555, _895) (-1, _901) 1 ]
EXPR [ (1, _888, _888) (-1, _902) 0 ]
EXPR [ (1, _898, _902) (-1, _903) 0 ]
EXPR [ (1, _896, _900) (-2, _899) 0 ]
EXPR [ (1, _897, _901) (1, _898) (-1, _902) 0 ]
EXPR [ (-1, _895) (1, _903) 0 ]
BRILLIG CALL func 1: PREDICATE = %EXPR [ 1 ]%
inputs: [Single(Expression { mul_terms: [], linear_combinations: [(1, Witness(896))], q_c: 0 }), Single(Expression { mul_terms: [], linear_combinations: [(1, Witness(896))], q_c: 0 }), Single(Expression { mul_terms: [], linear_combinations: [(1, Witness(897))], q_c: 0 }), Single(Expression { mul_terms: [], linear_combinations: [(1, Witness(897))], q_c: 0 })], outputs: [Simple(Witness(904)), Simple(Witness(905)), Simple(Witness(906))]
EXPR [ (1, _896, _896) (-1, _907) 0 ]
EXPR [ (1, _896, _897) (-1, _908) 0 ]
EXPR [ (555, _904) (-1, _909) 1 ]
EXPR [ (-555, _904) (-1, _910) 1 ]
EXPR [ (1, _897, _897) (-1, _911) 0 ]
EXPR [ (1, _907, _911) (-1, _912) 0 ]
EXPR [ (1, _905, _909) (-2, _908) 0 ]
EXPR [ (1, _906, _910) (1, _907) (-1, _911) 0 ]
EXPR [ (-1, _904) (1, _912) 0 ]

unconstrained func 0
[Const { destination: MemoryAddress(0), bit_size: 64, value: 1029 }, CalldataCopy { destination_address: MemoryAddress(1024), size: 5, offset: 0 }, Cast { destination: MemoryAddress(1024), source: MemoryAddress(1024), bit_size: 8 }, Cast { destination: MemoryAddress(1025), source: MemoryAddress(1025), bit_size: 8 }, Cast { destination: MemoryAddress(1026), source: MemoryAddress(1026), bit_size: 8 }, Cast { destination: MemoryAddress(1027), source: MemoryAddress(1027), bit_size: 64 }, Const { destination: MemoryAddress(2), bit_size: 64, value: 2¹⁰ }, Const { destination: MemoryAddress(3), bit_size: 64, value: 1 }, Mov { destination: MemoryAddress(4), source: MemoryAddress(1027) }, Mov { destination: MemoryAddress(5), source: MemoryAddress(1028) }, Mov { destination: MemoryAddress(6), source: MemoryAddress(2) }, Mov { destination: MemoryAddress(2), source: MemoryAddress(6) }, Call { location: 14 }, Stop { return_data_offset: 1029, return_data_size: 0 }, Const { destination: MemoryAddress(6), bit_size: 1, value: 1 }, Const { destination: MemoryAddress(9), bit_size: 64, value: 2⁴ }, Mov { destination: MemoryAddress(7), source: MemoryAddress(0) }, BinaryIntOp { destination: MemoryAddress(0), op: Add, bit_size: 64, lhs: MemoryAddress(0), rhs: MemoryAddress(9) }, Const { destination: MemoryAddress(8), bit_size: 64, value: 1 }, Const { destination: MemoryAddress(9), bit_size: 64, value: 0 }, Const { destination: MemoryAddress(10), bit_size: 8, value: 123 }, BinaryIntOp { destination: MemoryAddress(11), op: Add, bit_size: 64, lhs: MemoryAddress(7), rhs: MemoryAddress(9) }, Store { destination_pointer: MemoryAddress(11), source: MemoryAddress(10) }, Const { destination: MemoryAddress(11), bit_size: 64, value: 1 }, BinaryIntOp { destination: MemoryAddress(9), op: Add, bit_size: 64, lhs: MemoryAddress(9), rhs: MemoryAddress(11) }, Const { destination: MemoryAddress(11), bit_size: 8, value: 34 }, BinaryIntOp { destination: MemoryAddress(12), op: Add, bit_size: 64, lhs: MemoryAddress(7), rhs: MemoryAddress(9) }, Store { destination_pointer: MemoryAddress(12), source: MemoryAddress(11) }, Const { destination: MemoryAddress(12), bit_size: 64, value: 1 }, BinaryIntOp { destination: MemoryAddress(9), op: Add, bit_size: 64, lhs: MemoryAddress(9), rhs: MemoryAddress(12) }, Const { destination: MemoryAddress(12), bit_size: 8, value: 107 }, BinaryIntOp { destination: MemoryAddress(13), op: Add, bit_size: 64, lhs: MemoryAddress(7), rhs: MemoryAddress(9) }, Store { destination_pointer: MemoryAddress(13), source: MemoryAddress(12) }, Const { destination: MemoryAddress(13), bit_size: 64, value: 1 }, BinaryIntOp { destination: MemoryAddress(9), op: Add, bit_size: 64, lhs: MemoryAddress(9), rhs: MemoryAddress(13) }, Const { destination: MemoryAddress(13), bit_size: 8, value: 105 }, BinaryIntOp { destination: MemoryAddress(14), op: Add, bit_size: 64, lhs: MemoryAddress(7), rhs: MemoryAddress(9) }, Store { destination_pointer: MemoryAddress(14), source: MemoryAddress(13) }, Const { destination: MemoryAddress(14), bit_size: 64, value: 1 }, BinaryIntOp { destination: MemoryAddress(9), op: Add, bit_size: 64, lhs: MemoryAddress(9), rhs: MemoryAddress(14) }, Const { destination: MemoryAddress(14), bit_size: 8, value: 110 }, BinaryIntOp { destination: MemoryAddress(15), op: Add, bit_size: 64, lhs: MemoryAddress(7), rhs: MemoryAddress(9) }, Store { destination_pointer: MemoryAddress(15), source: MemoryAddress(14) }, Const { destination: MemoryAddress(15), bit_size: 64, value: 1 }, BinaryIntOp { destination: MemoryAddress(9), op: Add, bit_size: 64, lhs: MemoryAddress(9), rhs: MemoryAddress(15) }, Const { destination: MemoryAddress(15), bit_size: 8, value: 100 }, BinaryIntOp { destination: MemoryAddress(16), op: Add, bit_size: 64, lhs: MemoryAddress(7), rhs: MemoryAddress(9) }, Store { destination_pointer: MemoryAddress(16), source: MemoryAddress(15) }, Const { destination: MemoryAddress(16), bit_size: 64, value: 1 }, BinaryIntOp { destination: MemoryAddress(9), op: Add, bit_size: 64, lhs: MemoryAddress(9), rhs: MemoryAddress(16) }, BinaryIntOp { destination: MemoryAddress(16), op: Add, bit_size: 64, lhs: MemoryAddress(7), rhs: MemoryAddress(9) }, Store { destination_pointer: MemoryAddress(16), source: MemoryAddress(11) }, Const { destination: MemoryAddress(16), bit_size: 64, value: 1 }, BinaryIntOp { destination: MemoryAddress(9), op: Add, bit_size: 64, lhs: MemoryAddress(9), rhs: MemoryAddress(16) }, Const { destination: MemoryAddress(16), bit_size: 8, value: 58 }, BinaryIntOp { destination: MemoryAddress(17), op: Add, bit_size: 64, lhs: MemoryAddress(7), rhs: MemoryAddress(9) }, Store { destination_pointer: MemoryAddress(17), source: MemoryAddress(16) }, Const { destination: MemoryAddress(17), bit_size: 64, value: 1 }, BinaryIntOp { destination: MemoryAddress(9), op: Add, bit_size: 64, lhs: MemoryAddress(9), rhs: MemoryAddress(17) }, BinaryIntOp { destination: MemoryAddress(17), op: Add, bit_size: 64, lhs: MemoryAddress(7), rhs: MemoryAddress(9) }, Store { destination_pointer: MemoryAddress(17), source: MemoryAddress(11) }, Const { destination: MemoryAddress(17), bit_size: 64, value: 1 }, BinaryIntOp { destination: MemoryAddress(9), op: Add, bit_size: 64, lhs: MemoryAddress(9), rhs: MemoryAddress(17) }, Const { destination: MemoryAddress(17), bit_size: 8, value: 102 }, BinaryIntOp { destination: MemoryAddress(18), op: Add, bit_size: 64, lhs: MemoryAddress(7), rhs: MemoryAddress(9) }, Store { destination_pointer: MemoryAddress(18), source: MemoryAddress(17) }, Const { destination: MemoryAddress(18), bit_size: 64, value: 1 }, BinaryIntOp { destination: MemoryAddress(9), op: Add, bit_size: 64, lhs: MemoryAddress(9), rhs: MemoryAddress(18) }, BinaryIntOp { destination: MemoryAddress(18), op: Add, bit_size: 64, lhs: MemoryAddress(7), rhs: MemoryAddress(9) }, Store { destination_pointer: MemoryAddress(18), source: MemoryAddress(13) }, Const { destination: MemoryAddress(18), bit_size: 64, value: 1 }, BinaryIntOp { destination: MemoryAddress(9), op: Add, bit_size: 64, lhs: MemoryAddress(9), rhs: MemoryAddress(18) }, Const { destination: MemoryAddress(18), bit_size: 8, value: 101 }, BinaryIntOp { destination: MemoryAddress(19), op: Add, bit_size: 64, lhs: MemoryAddress(7), rhs: MemoryAddress(9) }, Store { destination_pointer: MemoryAddress(19), source: MemoryAddress(18) }, Const { destination: MemoryAddress(19), bit_size: 64, value: 1 }, BinaryIntOp { destination: MemoryAddress(9), op: Add, bit_size: 64, lhs: MemoryAddress(9), rhs: MemoryAddress(19) }, Const { destination: MemoryAddress(19), bit_size: 8, value: 108 }, BinaryIntOp { destination: MemoryAddress(20), op: Add, bit_size: 64, lhs: MemoryAddress(7), rhs: MemoryAddress(9) }, Store { destination_pointer: MemoryAddress(20), source: MemoryAddress(19) }, Const { destination: MemoryAddress(20), bit_size: 64, value: 1 }, BinaryIntOp { destination: MemoryAddress(9), op: Add, bit_size: 64, lhs: MemoryAddress(9), rhs: MemoryAddress(20) }, BinaryIntOp { destination: MemoryAddress(20), op: Add, bit_size: 64, lhs: MemoryAddress(7), rhs: MemoryAddress(9) }, Store { destination_pointer: MemoryAddress(20), source: MemoryAddress(15) }, Const { destination: MemoryAddress(20), bit_size: 64, value: 1 }, BinaryIntOp { destination: MemoryAddress(9), op: Add, bit_size: 64, lhs: MemoryAddress(9), rhs: MemoryAddress(20) }, BinaryIntOp { destination: MemoryAddress(20), op: Add, bit_size: 64, lhs: MemoryAddress(7), rhs: MemoryAddress(9) }, Store { destination_pointer: MemoryAddress(20), source: MemoryAddress(11) }, Const { destination: MemoryAddress(20), bit_size: 64, value: 1 }, BinaryIntOp { destination: MemoryAddress(9), op: Add, bit_size: 64, lhs: MemoryAddress(9), rhs: MemoryAddress(20) }, Const { destination: MemoryAddress(20), bit_size: 8, value: 125 }, BinaryIntOp { destination: MemoryAddress(21), op: Add, bit_size: 64, lhs: MemoryAddress(7), rhs: MemoryAddress(9) }, Store { destination_pointer: MemoryAddress(21), source: MemoryAddress(20) }, Const { destination: MemoryAddress(21), bit_size: 64, value: 1 }, BinaryIntOp { destination: MemoryAddress(9), op: Add, bit_size: 64, lhs: MemoryAddress(9), rhs: MemoryAddress(21) }, ForeignCall { function: "print", destinations: [], destination_value_types: [], inputs: [MemoryAddress(MemoryAddress(6)), HeapArray(HeapArray { pointer: MemoryAddress(2), size: 3 }), MemoryAddress(MemoryAddress(4)), MemoryAddress(MemoryAddress(5)), HeapArray(HeapArray { pointer: MemoryAddress(7), size: 16 }), MemoryAddress(MemoryAddress(6))], input_value_types: [Simple(1), Array { value_types: [Simple(8)], size: 3 }, Simple(254), Simple(254), Array { value_types: [Simple(8)], size: 16 }, Simple(1)] }, Return]
unconstrained func 1
[Const { destination: MemoryAddress(0), bit_size: 64, value: 1031 }, CalldataCopy { destination_address: MemoryAddress(1024), size: 4, offset: 0 }, Mov { destination: MemoryAddress(2), source: MemoryAddress(1024) }, Mov { destination: MemoryAddress(3), source: MemoryAddress(1025) }, Mov { destination: MemoryAddress(4), source: MemoryAddress(1026) }, Mov { destination: MemoryAddress(5), source: MemoryAddress(1027) }, Call { location: 11 }, Mov { destination: MemoryAddress(1028), source: MemoryAddress(2) }, Mov { destination: MemoryAddress(1029), source: MemoryAddress(3) }, Mov { destination: MemoryAddress(1030), source: MemoryAddress(4) }, Stop { return_data_offset: 1028, return_data_size: 3 }, BinaryFieldOp { destination: MemoryAddress(6), op: Mul, lhs: MemoryAddress(4), rhs: MemoryAddress(5) }, BinaryFieldOp { destination: MemoryAddress(7), op: Mul, lhs: MemoryAddress(6), rhs: MemoryAddress(2) }, BinaryFieldOp { destination: MemoryAddress(8), op: Mul, lhs: MemoryAddress(7), rhs: MemoryAddress(3) }, BinaryFieldOp { destination: MemoryAddress(7), op: Mul, lhs: MemoryAddress(2), rhs: MemoryAddress(3) }, BinaryFieldOp { destination: MemoryAddress(9), op: Sub, lhs: MemoryAddress(7), rhs: MemoryAddress(6) }, Const { destination: MemoryAddress(7), bit_size: 254, value: 555 }, BinaryFieldOp { destination: MemoryAddress(6), op: Mul, lhs: MemoryAddress(8), rhs: MemoryAddress(7) }, Const { destination: MemoryAddress(11), bit_size: 254, value: 1 }, BinaryFieldOp { destination: MemoryAddress(10), op: Sub, lhs: MemoryAddress(6), rhs: MemoryAddress(11) }, BinaryFieldOp { destination: MemoryAddress(12), op: Div, lhs: MemoryAddress(9), rhs: MemoryAddress(10) }, BinaryFieldOp { destination: MemoryAddress(9), op: Mul, lhs: MemoryAddress(2), rhs: MemoryAddress(5) }, BinaryFieldOp { destination: MemoryAddress(10), op: Mul, lhs: MemoryAddress(4), rhs: MemoryAddress(3) }, BinaryFieldOp { destination: MemoryAddress(13), op: Add, lhs: MemoryAddress(9), rhs: MemoryAddress(10) }, BinaryFieldOp { destination: MemoryAddress(9), op: Add, lhs: MemoryAddress(6), rhs: MemoryAddress(11) }, BinaryFieldOp { destination: MemoryAddress(6), op: Div, lhs: MemoryAddress(13), rhs: MemoryAddress(9) }, Mov { destination: MemoryAddress(9), source: MemoryAddress(8) }, Mov { destination: MemoryAddress(13), source: MemoryAddress(6) }, Mov { destination: MemoryAddress(10), source: MemoryAddress(12) }, Mov { destination: MemoryAddress(2), source: MemoryAddress(9) }, Mov { destination: MemoryAddress(3), source: MemoryAddress(13) }, Mov { destination: MemoryAddress(4), source: MemoryAddress(10) }, Return]

+---------+----------+----------------------+--------------+----------------------+
| Package | Function | Expression Width     | ACIR Opcodes | Backend Circuit Size |
+---------+----------+----------------------+--------------+----------------------+
| edwards | main     | Bounded { width: 4 } | 1015         | 944                  |
+---------+----------+----------------------+--------------+----------------------+
